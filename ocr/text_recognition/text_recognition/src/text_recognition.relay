def @main(%x: Tensor[(1, 3, 48, 192), float32] /* ty=Tensor[(1, 3, 48, 192), float32] */) -> Tensor[(1, 48, 97), float32] {
  %0 = nn.conv2d(%x, meta[relay.Constant][0] /* ty=Tensor[(11, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %1 = nn.batch_norm(%0, meta[relay.Constant][1] /* ty=Tensor[(11), float32] */, meta[relay.Constant][2] /* ty=Tensor[(11), float32] */, meta[relay.Constant][3] /* ty=Tensor[(11), float32] */, meta[relay.Constant][4] /* ty=Tensor[(11), float32] */) /* ty=(Tensor[(1, 11, 24, 96), float32], Tensor[(11), float32], Tensor[(11), float32]) */;
  %2 = %1.0 /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %3 = add(%2, 3f /* ty=float32 */) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %4 = clip(%3, a_min=0f, a_max=6f) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %5 = multiply(%2, %4) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %6 = divide(%5, 6f /* ty=float32 */) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][5] /* ty=Tensor[(11, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=11, channels=11, kernel_size=[3, 3]) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %8 = nn.batch_norm(%7, meta[relay.Constant][6] /* ty=Tensor[(11), float32] */, meta[relay.Constant][7] /* ty=Tensor[(11), float32] */, meta[relay.Constant][8] /* ty=Tensor[(11), float32] */, meta[relay.Constant][9] /* ty=Tensor[(11), float32] */) /* ty=(Tensor[(1, 11, 24, 96), float32], Tensor[(11), float32], Tensor[(11), float32]) */;
  %9 = %8.0 /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %10 = add(%9, 3f /* ty=float32 */) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %12 = multiply(%9, %11) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %13 = divide(%12, 6f /* ty=float32 */) /* ty=Tensor[(1, 11, 24, 96), float32] */;
  %14 = nn.conv2d(%13, meta[relay.Constant][10] /* ty=Tensor[(22, 11, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=22, kernel_size=[1, 1]) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %15 = nn.batch_norm(%14, meta[relay.Constant][11] /* ty=Tensor[(22), float32] */, meta[relay.Constant][12] /* ty=Tensor[(22), float32] */, meta[relay.Constant][13] /* ty=Tensor[(22), float32] */, meta[relay.Constant][14] /* ty=Tensor[(22), float32] */) /* ty=(Tensor[(1, 22, 24, 96), float32], Tensor[(22), float32], Tensor[(22), float32]) */;
  %16 = %15.0 /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %17 = add(%16, 3f /* ty=float32 */) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %19 = multiply(%16, %18) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %20 = divide(%19, 6f /* ty=float32 */) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %21 = nn.conv2d(%20, meta[relay.Constant][15] /* ty=Tensor[(22, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=22, channels=22, kernel_size=[3, 3]) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %22 = nn.batch_norm(%21, meta[relay.Constant][16] /* ty=Tensor[(22), float32] */, meta[relay.Constant][17] /* ty=Tensor[(22), float32] */, meta[relay.Constant][18] /* ty=Tensor[(22), float32] */, meta[relay.Constant][19] /* ty=Tensor[(22), float32] */) /* ty=(Tensor[(1, 22, 24, 96), float32], Tensor[(22), float32], Tensor[(22), float32]) */;
  %23 = %22.0 /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %24 = add(%23, 3f /* ty=float32 */) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %25 = clip(%24, a_min=0f, a_max=6f) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %26 = multiply(%23, %25) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %27 = divide(%26, 6f /* ty=float32 */) /* ty=Tensor[(1, 22, 24, 96), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][20] /* ty=Tensor[(44, 22, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %29 = nn.batch_norm(%28, meta[relay.Constant][21] /* ty=Tensor[(44), float32] */, meta[relay.Constant][22] /* ty=Tensor[(44), float32] */, meta[relay.Constant][23] /* ty=Tensor[(44), float32] */, meta[relay.Constant][24] /* ty=Tensor[(44), float32] */) /* ty=(Tensor[(1, 44, 24, 96), float32], Tensor[(44), float32], Tensor[(44), float32]) */;
  %30 = %29.0 /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %31 = add(%30, 3f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %32 = clip(%31, a_min=0f, a_max=6f) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %33 = multiply(%30, %32) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %34 = divide(%33, 6f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %35 = nn.conv2d(%34, meta[relay.Constant][25] /* ty=Tensor[(44, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=44, channels=44, kernel_size=[3, 3]) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %36 = nn.batch_norm(%35, meta[relay.Constant][26] /* ty=Tensor[(44), float32] */, meta[relay.Constant][27] /* ty=Tensor[(44), float32] */, meta[relay.Constant][28] /* ty=Tensor[(44), float32] */, meta[relay.Constant][29] /* ty=Tensor[(44), float32] */) /* ty=(Tensor[(1, 44, 24, 96), float32], Tensor[(44), float32], Tensor[(44), float32]) */;
  %37 = %36.0 /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %38 = add(%37, 3f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %40 = multiply(%37, %39) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %41 = divide(%40, 6f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][30] /* ty=Tensor[(44, 44, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %43 = nn.batch_norm(%42, meta[relay.Constant][31] /* ty=Tensor[(44), float32] */, meta[relay.Constant][32] /* ty=Tensor[(44), float32] */, meta[relay.Constant][33] /* ty=Tensor[(44), float32] */, meta[relay.Constant][34] /* ty=Tensor[(44), float32] */) /* ty=(Tensor[(1, 44, 24, 96), float32], Tensor[(44), float32], Tensor[(44), float32]) */;
  %44 = %43.0 /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %45 = add(%44, 3f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %46 = clip(%45, a_min=0f, a_max=6f) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %47 = multiply(%44, %46) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %48 = divide(%47, 6f /* ty=float32 */) /* ty=Tensor[(1, 44, 24, 96), float32] */;
  %49 = nn.conv2d(%48, meta[relay.Constant][35] /* ty=Tensor[(44, 1, 3, 3), float32] */, strides=[2, 1], padding=[1, 1, 1, 1], groups=44, channels=44, kernel_size=[3, 3]) /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %50 = nn.batch_norm(%49, meta[relay.Constant][36] /* ty=Tensor[(44), float32] */, meta[relay.Constant][37] /* ty=Tensor[(44), float32] */, meta[relay.Constant][38] /* ty=Tensor[(44), float32] */, meta[relay.Constant][39] /* ty=Tensor[(44), float32] */) /* ty=(Tensor[(1, 44, 12, 96), float32], Tensor[(44), float32], Tensor[(44), float32]) */;
  %51 = %50.0 /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %52 = add(%51, 3f /* ty=float32 */) /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %54 = multiply(%51, %53) /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %55 = divide(%54, 6f /* ty=float32 */) /* ty=Tensor[(1, 44, 12, 96), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][40] /* ty=Tensor[(89, 44, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %57 = nn.batch_norm(%56, meta[relay.Constant][41] /* ty=Tensor[(89), float32] */, meta[relay.Constant][42] /* ty=Tensor[(89), float32] */, meta[relay.Constant][43] /* ty=Tensor[(89), float32] */, meta[relay.Constant][44] /* ty=Tensor[(89), float32] */) /* ty=(Tensor[(1, 89, 12, 96), float32], Tensor[(89), float32], Tensor[(89), float32]) */;
  %58 = %57.0 /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %59 = add(%58, 3f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %60 = clip(%59, a_min=0f, a_max=6f) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %61 = multiply(%58, %60) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %62 = divide(%61, 6f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %63 = nn.conv2d(%62, meta[relay.Constant][45] /* ty=Tensor[(89, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=89, channels=89, kernel_size=[3, 3]) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %64 = nn.batch_norm(%63, meta[relay.Constant][46] /* ty=Tensor[(89), float32] */, meta[relay.Constant][47] /* ty=Tensor[(89), float32] */, meta[relay.Constant][48] /* ty=Tensor[(89), float32] */, meta[relay.Constant][49] /* ty=Tensor[(89), float32] */) /* ty=(Tensor[(1, 89, 12, 96), float32], Tensor[(89), float32], Tensor[(89), float32]) */;
  %65 = %64.0 /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %66 = add(%65, 3f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %67 = clip(%66, a_min=0f, a_max=6f) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %68 = multiply(%65, %67) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %69 = divide(%68, 6f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %70 = nn.conv2d(%69, meta[relay.Constant][50] /* ty=Tensor[(89, 89, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %71 = nn.batch_norm(%70, meta[relay.Constant][51] /* ty=Tensor[(89), float32] */, meta[relay.Constant][52] /* ty=Tensor[(89), float32] */, meta[relay.Constant][53] /* ty=Tensor[(89), float32] */, meta[relay.Constant][54] /* ty=Tensor[(89), float32] */) /* ty=(Tensor[(1, 89, 12, 96), float32], Tensor[(89), float32], Tensor[(89), float32]) */;
  %72 = %71.0 /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %73 = add(%72, 3f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %74 = clip(%73, a_min=0f, a_max=6f) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %75 = multiply(%72, %74) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %76 = divide(%75, 6f /* ty=float32 */) /* ty=Tensor[(1, 89, 12, 96), float32] */;
  %77 = nn.conv2d(%76, meta[relay.Constant][55] /* ty=Tensor[(89, 1, 3, 3), float32] */, strides=[2, 1], padding=[1, 1, 1, 1], groups=89, channels=89, kernel_size=[3, 3]) /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %78 = nn.batch_norm(%77, meta[relay.Constant][56] /* ty=Tensor[(89), float32] */, meta[relay.Constant][57] /* ty=Tensor[(89), float32] */, meta[relay.Constant][58] /* ty=Tensor[(89), float32] */, meta[relay.Constant][59] /* ty=Tensor[(89), float32] */) /* ty=(Tensor[(1, 89, 6, 96), float32], Tensor[(89), float32], Tensor[(89), float32]) */;
  %79 = %78.0 /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %80 = add(%79, 3f /* ty=float32 */) /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %81 = clip(%80, a_min=0f, a_max=6f) /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %82 = multiply(%79, %81) /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %83 = divide(%82, 6f /* ty=float32 */) /* ty=Tensor[(1, 89, 6, 96), float32] */;
  %84 = nn.conv2d(%83, meta[relay.Constant][60] /* ty=Tensor[(179, 89, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %85 = nn.batch_norm(%84, meta[relay.Constant][61] /* ty=Tensor[(179), float32] */, meta[relay.Constant][62] /* ty=Tensor[(179), float32] */, meta[relay.Constant][63] /* ty=Tensor[(179), float32] */, meta[relay.Constant][64] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %86 = %85.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %87 = add(%86, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %89 = multiply(%86, %88) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %90 = divide(%89, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][65] /* ty=Tensor[(179, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %92 = nn.batch_norm(%91, meta[relay.Constant][66] /* ty=Tensor[(179), float32] */, meta[relay.Constant][67] /* ty=Tensor[(179), float32] */, meta[relay.Constant][68] /* ty=Tensor[(179), float32] */, meta[relay.Constant][69] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %93 = %92.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %94 = add(%93, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %95 = clip(%94, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %96 = multiply(%93, %95) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %97 = divide(%96, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %98 = nn.conv2d(%97, meta[relay.Constant][70] /* ty=Tensor[(179, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %99 = nn.batch_norm(%98, meta[relay.Constant][71] /* ty=Tensor[(179), float32] */, meta[relay.Constant][72] /* ty=Tensor[(179), float32] */, meta[relay.Constant][73] /* ty=Tensor[(179), float32] */, meta[relay.Constant][74] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %100 = %99.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %101 = add(%100, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %103 = multiply(%100, %102) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %104 = divide(%103, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %105 = nn.conv2d(%104, meta[relay.Constant][75] /* ty=Tensor[(179, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %106 = nn.batch_norm(%105, meta[relay.Constant][76] /* ty=Tensor[(179), float32] */, meta[relay.Constant][77] /* ty=Tensor[(179), float32] */, meta[relay.Constant][78] /* ty=Tensor[(179), float32] */, meta[relay.Constant][79] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %107 = %106.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %108 = add(%107, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %109 = clip(%108, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %110 = multiply(%107, %109) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %111 = divide(%110, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %112 = nn.conv2d(%111, meta[relay.Constant][80] /* ty=Tensor[(179, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %113 = nn.batch_norm(%112, meta[relay.Constant][81] /* ty=Tensor[(179), float32] */, meta[relay.Constant][82] /* ty=Tensor[(179), float32] */, meta[relay.Constant][83] /* ty=Tensor[(179), float32] */, meta[relay.Constant][84] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %114 = %113.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %115 = add(%114, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %116 = clip(%115, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %117 = multiply(%114, %116) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %118 = divide(%117, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %119 = nn.conv2d(%118, meta[relay.Constant][85] /* ty=Tensor[(179, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %120 = nn.batch_norm(%119, meta[relay.Constant][86] /* ty=Tensor[(179), float32] */, meta[relay.Constant][87] /* ty=Tensor[(179), float32] */, meta[relay.Constant][88] /* ty=Tensor[(179), float32] */, meta[relay.Constant][89] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %121 = %120.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %122 = add(%121, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %123 = clip(%122, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %124 = multiply(%121, %123) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %125 = divide(%124, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %126 = nn.conv2d(%125, meta[relay.Constant][90] /* ty=Tensor[(179, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %127 = nn.batch_norm(%126, meta[relay.Constant][91] /* ty=Tensor[(179), float32] */, meta[relay.Constant][92] /* ty=Tensor[(179), float32] */, meta[relay.Constant][93] /* ty=Tensor[(179), float32] */, meta[relay.Constant][94] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %128 = %127.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %129 = add(%128, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %130 = clip(%129, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %131 = multiply(%128, %130) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %132 = divide(%131, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %133 = nn.conv2d(%132, meta[relay.Constant][95] /* ty=Tensor[(179, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %134 = nn.batch_norm(%133, meta[relay.Constant][96] /* ty=Tensor[(179), float32] */, meta[relay.Constant][97] /* ty=Tensor[(179), float32] */, meta[relay.Constant][98] /* ty=Tensor[(179), float32] */, meta[relay.Constant][99] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %135 = %134.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %136 = add(%135, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %137 = clip(%136, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %138 = multiply(%135, %137) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %139 = divide(%138, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %140 = nn.conv2d(%139, meta[relay.Constant][100] /* ty=Tensor[(179, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %141 = nn.batch_norm(%140, meta[relay.Constant][101] /* ty=Tensor[(179), float32] */, meta[relay.Constant][102] /* ty=Tensor[(179), float32] */, meta[relay.Constant][103] /* ty=Tensor[(179), float32] */, meta[relay.Constant][104] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %142 = %141.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %143 = add(%142, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %144 = clip(%143, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %145 = multiply(%142, %144) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %146 = divide(%145, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %147 = nn.conv2d(%146, meta[relay.Constant][105] /* ty=Tensor[(179, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %148 = nn.batch_norm(%147, meta[relay.Constant][106] /* ty=Tensor[(179), float32] */, meta[relay.Constant][107] /* ty=Tensor[(179), float32] */, meta[relay.Constant][108] /* ty=Tensor[(179), float32] */, meta[relay.Constant][109] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %149 = %148.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %150 = add(%149, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %151 = clip(%150, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %152 = multiply(%149, %151) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %153 = divide(%152, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %154 = nn.conv2d(%153, meta[relay.Constant][110] /* ty=Tensor[(179, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %155 = nn.batch_norm(%154, meta[relay.Constant][111] /* ty=Tensor[(179), float32] */, meta[relay.Constant][112] /* ty=Tensor[(179), float32] */, meta[relay.Constant][113] /* ty=Tensor[(179), float32] */, meta[relay.Constant][114] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 6, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %156 = %155.0 /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %157 = add(%156, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %158 = clip(%157, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %159 = multiply(%156, %158) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %160 = divide(%159, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 6, 96), float32] */;
  %161 = nn.conv2d(%160, meta[relay.Constant][115] /* ty=Tensor[(179, 1, 5, 5), float32] */, strides=[2, 1], padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %162 = nn.batch_norm(%161, meta[relay.Constant][116] /* ty=Tensor[(179), float32] */, meta[relay.Constant][117] /* ty=Tensor[(179), float32] */, meta[relay.Constant][118] /* ty=Tensor[(179), float32] */, meta[relay.Constant][119] /* ty=Tensor[(179), float32] */) /* ty=(Tensor[(1, 179, 3, 96), float32], Tensor[(179), float32], Tensor[(179), float32]) */;
  %163 = %162.0 /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %164 = add(%163, 3f /* ty=float32 */) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %166 = multiply(%163, %165) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %167 = divide(%166, 6f /* ty=float32 */) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %168 = nn.global_avg_pool2d(%167) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %169 = nn.conv2d(%168, meta[relay.Constant][120] /* ty=Tensor[(44, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]) /* ty=Tensor[(1, 44, 1, 1), float32] */;
  %170 = nn.bias_add(%169, meta[relay.Constant][121] /* ty=Tensor[(44), float32] */) /* ty=Tensor[(1, 44, 1, 1), float32] */;
  %171 = nn.relu(%170) /* ty=Tensor[(1, 44, 1, 1), float32] */;
  %172 = nn.conv2d(%171, meta[relay.Constant][122] /* ty=Tensor[(179, 44, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %173 = nn.bias_add(%172, meta[relay.Constant][123] /* ty=Tensor[(179), float32] */) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %174 = multiply(%173, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %175 = add(%174, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %176 = clip(%175, a_min=0f, a_max=1f) /* ty=Tensor[(1, 179, 1, 1), float32] */;
  %177 = multiply(%167, %176) /* ty=Tensor[(1, 179, 3, 96), float32] */;
  %178 = nn.conv2d(%177, meta[relay.Constant][124] /* ty=Tensor[(358, 179, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %179 = nn.batch_norm(%178, meta[relay.Constant][125] /* ty=Tensor[(358), float32] */, meta[relay.Constant][126] /* ty=Tensor[(358), float32] */, meta[relay.Constant][127] /* ty=Tensor[(358), float32] */, meta[relay.Constant][128] /* ty=Tensor[(358), float32] */) /* ty=(Tensor[(1, 358, 3, 96), float32], Tensor[(358), float32], Tensor[(358), float32]) */;
  %180 = %179.0 /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %181 = add(%180, 3f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %182 = clip(%181, a_min=0f, a_max=6f) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %183 = multiply(%180, %182) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %184 = divide(%183, 6f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %185 = nn.conv2d(%184, meta[relay.Constant][129] /* ty=Tensor[(358, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=358, channels=358, kernel_size=[5, 5]) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %186 = nn.batch_norm(%185, meta[relay.Constant][130] /* ty=Tensor[(358), float32] */, meta[relay.Constant][131] /* ty=Tensor[(358), float32] */, meta[relay.Constant][132] /* ty=Tensor[(358), float32] */, meta[relay.Constant][133] /* ty=Tensor[(358), float32] */) /* ty=(Tensor[(1, 358, 3, 96), float32], Tensor[(358), float32], Tensor[(358), float32]) */;
  %187 = %186.0 /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %188 = add(%187, 3f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %189 = clip(%188, a_min=0f, a_max=6f) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %190 = multiply(%187, %189) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %191 = divide(%190, 6f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %192 = nn.global_avg_pool2d(%191) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %193 = nn.conv2d(%192, meta[relay.Constant][134] /* ty=Tensor[(89, 358, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]) /* ty=Tensor[(1, 89, 1, 1), float32] */;
  %194 = nn.bias_add(%193, meta[relay.Constant][135] /* ty=Tensor[(89), float32] */) /* ty=Tensor[(1, 89, 1, 1), float32] */;
  %195 = nn.relu(%194) /* ty=Tensor[(1, 89, 1, 1), float32] */;
  %196 = nn.conv2d(%195, meta[relay.Constant][136] /* ty=Tensor[(358, 89, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %197 = nn.bias_add(%196, meta[relay.Constant][137] /* ty=Tensor[(358), float32] */) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %198 = multiply(%197, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %199 = add(%198, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %200 = clip(%199, a_min=0f, a_max=1f) /* ty=Tensor[(1, 358, 1, 1), float32] */;
  %201 = multiply(%191, %200) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %202 = nn.conv2d(%201, meta[relay.Constant][138] /* ty=Tensor[(358, 358, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %203 = nn.batch_norm(%202, meta[relay.Constant][139] /* ty=Tensor[(358), float32] */, meta[relay.Constant][140] /* ty=Tensor[(358), float32] */, meta[relay.Constant][141] /* ty=Tensor[(358), float32] */, meta[relay.Constant][142] /* ty=Tensor[(358), float32] */) /* ty=(Tensor[(1, 358, 3, 96), float32], Tensor[(358), float32], Tensor[(358), float32]) */;
  %204 = %203.0 /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %205 = add(%204, 3f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %206 = clip(%205, a_min=0f, a_max=6f) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %207 = multiply(%204, %206) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %208 = divide(%207, 6f /* ty=float32 */) /* ty=Tensor[(1, 358, 3, 96), float32] */;
  %209 = nn.max_pool2d(%208, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 358, 1, 48), float32] */;
  %210 = squeeze(%209, axis=[2]) /* ty=Tensor[(1, 358, 48), float32] */;
  %211 = transpose(%210, axes=[0, 2, 1]) /* ty=Tensor[(1, 48, 358), float32] */;
  %212 = reshape(%211, newshape=[-1, 358]) /* ty=Tensor[(48, 358), float32] */;
  %213 = nn.dense(%212, meta[relay.Constant][143] /* ty=Tensor[(97, 358), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(48, 97), float32] */;
  %214 = reshape(%213, newshape=[1, 48, 97]) /* ty=Tensor[(1, 48, 97), float32] */;
  %215 = add(%214, meta[relay.Constant][144] /* ty=Tensor[(97), float32] */) /* ty=Tensor[(1, 48, 97), float32] */;
  nn.softmax(%215, axis=2) /* ty=Tensor[(1, 48, 97), float32] */
}

