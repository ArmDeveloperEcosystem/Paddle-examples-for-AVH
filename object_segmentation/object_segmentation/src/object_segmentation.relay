def @main(%x: Tensor[(1, 3, 128, 128), float32] /* ty=Tensor[(1, 3, 128, 128), float32] */) -> Tensor[(1, 128, 128), int64] {
  %0 = nn.conv2d(%x, meta[relay.Constant][0] /* ty=Tensor[(36, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 64, 64), float32] */;
  %1 = nn.batch_norm(%0, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, meta[relay.Constant][2] /* ty=Tensor[(36), float32] */, meta[relay.Constant][3] /* ty=Tensor[(36), float32] */, meta[relay.Constant][4] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 64, 64), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %2 = %1.0 /* ty=Tensor[(1, 36, 64, 64), float32] */;
  %3 = nn.relu(%2) /* ty=Tensor[(1, 36, 64, 64), float32] */;
  %4 = nn.conv2d(%3, meta[relay.Constant][5] /* ty=Tensor[(18, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=18, kernel_size=[1, 1]) /* ty=Tensor[(1, 18, 64, 64), float32] */;
  %5 = nn.batch_norm(%4, meta[relay.Constant][6] /* ty=Tensor[(18), float32] */, meta[relay.Constant][7] /* ty=Tensor[(18), float32] */, meta[relay.Constant][8] /* ty=Tensor[(18), float32] */, meta[relay.Constant][9] /* ty=Tensor[(18), float32] */) /* ty=(Tensor[(1, 18, 64, 64), float32], Tensor[(18), float32], Tensor[(18), float32]) */;
  %6 = %5.0 /* ty=Tensor[(1, 18, 64, 64), float32] */;
  %7 = nn.max_pool2d(%3, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %8 = nn.conv2d(%7, meta[relay.Constant][10] /* ty=Tensor[(36, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %9 = nn.batch_norm(%8, meta[relay.Constant][11] /* ty=Tensor[(36), float32] */, meta[relay.Constant][12] /* ty=Tensor[(36), float32] */, meta[relay.Constant][13] /* ty=Tensor[(36), float32] */, meta[relay.Constant][14] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %10 = %9.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %11 = nn.conv2d(%10, meta[relay.Constant][15] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %12 = nn.batch_norm(%11, meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, meta[relay.Constant][17] /* ty=Tensor[(36), float32] */, meta[relay.Constant][18] /* ty=Tensor[(36), float32] */, meta[relay.Constant][19] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %13 = %12.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %14 = nn.conv2d(%7, meta[relay.Constant][20] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %15 = nn.batch_norm(%14, meta[relay.Constant][21] /* ty=Tensor[(36), float32] */, meta[relay.Constant][22] /* ty=Tensor[(36), float32] */, meta[relay.Constant][23] /* ty=Tensor[(36), float32] */, meta[relay.Constant][24] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 32, 32), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %16 = %15.0 /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %18 = nn.conv2d(%17, meta[relay.Constant][25] /* ty=Tensor[(36, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %19 = nn.batch_norm(%18, meta[relay.Constant][26] /* ty=Tensor[(36), float32] */, meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, meta[relay.Constant][28] /* ty=Tensor[(36), float32] */, meta[relay.Constant][29] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %20 = %19.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %21 = nn.conv2d(%20, meta[relay.Constant][30] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %22 = nn.batch_norm(%21, meta[relay.Constant][31] /* ty=Tensor[(36), float32] */, meta[relay.Constant][32] /* ty=Tensor[(36), float32] */, meta[relay.Constant][33] /* ty=Tensor[(36), float32] */, meta[relay.Constant][34] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %23 = %22.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %24 = nn.relu(%13) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %25 = nn.relu(%23) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %26 = (%24, %25) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %27 = concatenate(%26, axis=1) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %28 = reshape(%27, newshape=[0, 2, 36, 16, 16]) /* ty=Tensor[(1, 2, 36, 16, 16), float32] */;
  %29 = transpose(%28, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 36, 2, 16, 16), float32] */;
  %30 = reshape(%29, newshape=[0, 72, 16, 16]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %31 = split(%30, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %32 = %31.1 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %33 = nn.conv2d(%32, meta[relay.Constant][35] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %34 = nn.batch_norm(%33, meta[relay.Constant][36] /* ty=Tensor[(36), float32] */, meta[relay.Constant][37] /* ty=Tensor[(36), float32] */, meta[relay.Constant][38] /* ty=Tensor[(36), float32] */, meta[relay.Constant][39] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %35 = %34.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %36 = nn.relu(%35) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %37 = nn.conv2d(%36, meta[relay.Constant][40] /* ty=Tensor[(36, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %38 = nn.batch_norm(%37, meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, meta[relay.Constant][43] /* ty=Tensor[(36), float32] */, meta[relay.Constant][44] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %39 = %38.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %40 = nn.conv2d(%39, meta[relay.Constant][45] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %41 = nn.batch_norm(%40, meta[relay.Constant][46] /* ty=Tensor[(36), float32] */, meta[relay.Constant][47] /* ty=Tensor[(36), float32] */, meta[relay.Constant][48] /* ty=Tensor[(36), float32] */, meta[relay.Constant][49] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %42 = %41.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %43 = %31.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %44 = nn.relu(%42) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %45 = (%43, %44) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %46 = concatenate(%45, axis=1) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %47 = reshape(%46, newshape=[0, 2, 36, 16, 16]) /* ty=Tensor[(1, 2, 36, 16, 16), float32] */;
  %48 = transpose(%47, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 36, 2, 16, 16), float32] */;
  %49 = reshape(%48, newshape=[0, 72, 16, 16]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %50 = split(%49, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %51 = %50.1 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %52 = nn.conv2d(%51, meta[relay.Constant][50] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %53 = nn.batch_norm(%52, meta[relay.Constant][51] /* ty=Tensor[(36), float32] */, meta[relay.Constant][52] /* ty=Tensor[(36), float32] */, meta[relay.Constant][53] /* ty=Tensor[(36), float32] */, meta[relay.Constant][54] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %54 = %53.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %55 = nn.relu(%54) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][55] /* ty=Tensor[(36, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %57 = nn.batch_norm(%56, meta[relay.Constant][56] /* ty=Tensor[(36), float32] */, meta[relay.Constant][57] /* ty=Tensor[(36), float32] */, meta[relay.Constant][58] /* ty=Tensor[(36), float32] */, meta[relay.Constant][59] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %58 = %57.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %59 = nn.conv2d(%58, meta[relay.Constant][60] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %60 = nn.batch_norm(%59, meta[relay.Constant][61] /* ty=Tensor[(36), float32] */, meta[relay.Constant][62] /* ty=Tensor[(36), float32] */, meta[relay.Constant][63] /* ty=Tensor[(36), float32] */, meta[relay.Constant][64] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %61 = %60.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %62 = %50.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %63 = nn.relu(%61) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %64 = (%62, %63) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %65 = concatenate(%64, axis=1) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %66 = reshape(%65, newshape=[0, 2, 36, 16, 16]) /* ty=Tensor[(1, 2, 36, 16, 16), float32] */;
  %67 = transpose(%66, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 36, 2, 16, 16), float32] */;
  %68 = reshape(%67, newshape=[0, 72, 16, 16]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %69 = split(%68, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %70 = %69.1 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %71 = nn.conv2d(%70, meta[relay.Constant][65] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %72 = nn.batch_norm(%71, meta[relay.Constant][66] /* ty=Tensor[(36), float32] */, meta[relay.Constant][67] /* ty=Tensor[(36), float32] */, meta[relay.Constant][68] /* ty=Tensor[(36), float32] */, meta[relay.Constant][69] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %73 = %72.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %74 = nn.relu(%73) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %75 = nn.conv2d(%74, meta[relay.Constant][70] /* ty=Tensor[(36, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %76 = nn.batch_norm(%75, meta[relay.Constant][71] /* ty=Tensor[(36), float32] */, meta[relay.Constant][72] /* ty=Tensor[(36), float32] */, meta[relay.Constant][73] /* ty=Tensor[(36), float32] */, meta[relay.Constant][74] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %77 = %76.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %78 = nn.conv2d(%77, meta[relay.Constant][75] /* ty=Tensor[(36, 36, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %79 = nn.batch_norm(%78, meta[relay.Constant][76] /* ty=Tensor[(36), float32] */, meta[relay.Constant][77] /* ty=Tensor[(36), float32] */, meta[relay.Constant][78] /* ty=Tensor[(36), float32] */, meta[relay.Constant][79] /* ty=Tensor[(36), float32] */) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(36), float32], Tensor[(36), float32]) */;
  %80 = %79.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %81 = %69.0 /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %82 = nn.relu(%80) /* ty=Tensor[(1, 36, 16, 16), float32] */;
  %83 = (%81, %82) /* ty=(Tensor[(1, 36, 16, 16), float32], Tensor[(1, 36, 16, 16), float32]) */;
  %84 = concatenate(%83, axis=1) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %85 = reshape(%84, newshape=[0, 2, 36, 16, 16]) /* ty=Tensor[(1, 2, 36, 16, 16), float32] */;
  %86 = transpose(%85, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 36, 2, 16, 16), float32] */;
  %87 = reshape(%86, newshape=[0, 72, 16, 16]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %88 = nn.conv2d(%87, meta[relay.Constant][80] /* ty=Tensor[(72, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %89 = nn.batch_norm(%88, meta[relay.Constant][81] /* ty=Tensor[(72), float32] */, meta[relay.Constant][82] /* ty=Tensor[(72), float32] */, meta[relay.Constant][83] /* ty=Tensor[(72), float32] */, meta[relay.Constant][84] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %90 = %89.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][85] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %92 = nn.batch_norm(%91, meta[relay.Constant][86] /* ty=Tensor[(72), float32] */, meta[relay.Constant][87] /* ty=Tensor[(72), float32] */, meta[relay.Constant][88] /* ty=Tensor[(72), float32] */, meta[relay.Constant][89] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %93 = %92.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %94 = nn.conv2d(%87, meta[relay.Constant][90] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %95 = nn.batch_norm(%94, meta[relay.Constant][91] /* ty=Tensor[(72), float32] */, meta[relay.Constant][92] /* ty=Tensor[(72), float32] */, meta[relay.Constant][93] /* ty=Tensor[(72), float32] */, meta[relay.Constant][94] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 16, 16), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %96 = %95.0 /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %98 = nn.conv2d(%97, meta[relay.Constant][95] /* ty=Tensor[(72, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %99 = nn.batch_norm(%98, meta[relay.Constant][96] /* ty=Tensor[(72), float32] */, meta[relay.Constant][97] /* ty=Tensor[(72), float32] */, meta[relay.Constant][98] /* ty=Tensor[(72), float32] */, meta[relay.Constant][99] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %100 = %99.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %101 = nn.conv2d(%100, meta[relay.Constant][100] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %102 = nn.batch_norm(%101, meta[relay.Constant][101] /* ty=Tensor[(72), float32] */, meta[relay.Constant][102] /* ty=Tensor[(72), float32] */, meta[relay.Constant][103] /* ty=Tensor[(72), float32] */, meta[relay.Constant][104] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %103 = %102.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %104 = nn.relu(%93) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %105 = nn.relu(%103) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %106 = (%104, %105) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %107 = concatenate(%106, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %108 = reshape(%107, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %109 = transpose(%108, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %110 = reshape(%109, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %111 = split(%110, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %112 = %111.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %113 = nn.conv2d(%112, meta[relay.Constant][105] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %114 = nn.batch_norm(%113, meta[relay.Constant][106] /* ty=Tensor[(72), float32] */, meta[relay.Constant][107] /* ty=Tensor[(72), float32] */, meta[relay.Constant][108] /* ty=Tensor[(72), float32] */, meta[relay.Constant][109] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %115 = %114.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %116 = nn.relu(%115) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %117 = nn.conv2d(%116, meta[relay.Constant][110] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %118 = nn.batch_norm(%117, meta[relay.Constant][111] /* ty=Tensor[(72), float32] */, meta[relay.Constant][112] /* ty=Tensor[(72), float32] */, meta[relay.Constant][113] /* ty=Tensor[(72), float32] */, meta[relay.Constant][114] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %119 = %118.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %120 = nn.conv2d(%119, meta[relay.Constant][115] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %121 = nn.batch_norm(%120, meta[relay.Constant][116] /* ty=Tensor[(72), float32] */, meta[relay.Constant][117] /* ty=Tensor[(72), float32] */, meta[relay.Constant][118] /* ty=Tensor[(72), float32] */, meta[relay.Constant][119] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %122 = %121.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %123 = %111.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %124 = nn.relu(%122) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %125 = (%123, %124) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %126 = concatenate(%125, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %127 = reshape(%126, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %128 = transpose(%127, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %129 = reshape(%128, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %130 = split(%129, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %131 = %130.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %132 = nn.conv2d(%131, meta[relay.Constant][120] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %133 = nn.batch_norm(%132, meta[relay.Constant][121] /* ty=Tensor[(72), float32] */, meta[relay.Constant][122] /* ty=Tensor[(72), float32] */, meta[relay.Constant][123] /* ty=Tensor[(72), float32] */, meta[relay.Constant][124] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %134 = %133.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %135 = nn.relu(%134) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %136 = nn.conv2d(%135, meta[relay.Constant][125] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %137 = nn.batch_norm(%136, meta[relay.Constant][126] /* ty=Tensor[(72), float32] */, meta[relay.Constant][127] /* ty=Tensor[(72), float32] */, meta[relay.Constant][128] /* ty=Tensor[(72), float32] */, meta[relay.Constant][129] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %138 = %137.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %139 = nn.conv2d(%138, meta[relay.Constant][130] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %140 = nn.batch_norm(%139, meta[relay.Constant][131] /* ty=Tensor[(72), float32] */, meta[relay.Constant][132] /* ty=Tensor[(72), float32] */, meta[relay.Constant][133] /* ty=Tensor[(72), float32] */, meta[relay.Constant][134] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %141 = %140.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %142 = %130.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %143 = nn.relu(%141) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %144 = (%142, %143) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %145 = concatenate(%144, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %146 = reshape(%145, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %147 = transpose(%146, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %148 = reshape(%147, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %149 = split(%148, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %150 = %149.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %151 = nn.conv2d(%150, meta[relay.Constant][135] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %152 = nn.batch_norm(%151, meta[relay.Constant][136] /* ty=Tensor[(72), float32] */, meta[relay.Constant][137] /* ty=Tensor[(72), float32] */, meta[relay.Constant][138] /* ty=Tensor[(72), float32] */, meta[relay.Constant][139] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %153 = %152.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %154 = nn.relu(%153) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %155 = nn.conv2d(%154, meta[relay.Constant][140] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %156 = nn.batch_norm(%155, meta[relay.Constant][141] /* ty=Tensor[(72), float32] */, meta[relay.Constant][142] /* ty=Tensor[(72), float32] */, meta[relay.Constant][143] /* ty=Tensor[(72), float32] */, meta[relay.Constant][144] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %157 = %156.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %158 = nn.conv2d(%157, meta[relay.Constant][145] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %159 = nn.batch_norm(%158, meta[relay.Constant][146] /* ty=Tensor[(72), float32] */, meta[relay.Constant][147] /* ty=Tensor[(72), float32] */, meta[relay.Constant][148] /* ty=Tensor[(72), float32] */, meta[relay.Constant][149] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %160 = %159.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %161 = %149.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %162 = nn.relu(%160) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %163 = (%161, %162) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %164 = concatenate(%163, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %165 = reshape(%164, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %166 = transpose(%165, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %167 = reshape(%166, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %168 = split(%167, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %169 = %168.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %170 = nn.conv2d(%169, meta[relay.Constant][150] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %171 = nn.batch_norm(%170, meta[relay.Constant][151] /* ty=Tensor[(72), float32] */, meta[relay.Constant][152] /* ty=Tensor[(72), float32] */, meta[relay.Constant][153] /* ty=Tensor[(72), float32] */, meta[relay.Constant][154] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %172 = %171.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %173 = nn.relu(%172) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %174 = nn.conv2d(%173, meta[relay.Constant][155] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %175 = nn.batch_norm(%174, meta[relay.Constant][156] /* ty=Tensor[(72), float32] */, meta[relay.Constant][157] /* ty=Tensor[(72), float32] */, meta[relay.Constant][158] /* ty=Tensor[(72), float32] */, meta[relay.Constant][159] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %176 = %175.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %177 = nn.conv2d(%176, meta[relay.Constant][160] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %178 = nn.batch_norm(%177, meta[relay.Constant][161] /* ty=Tensor[(72), float32] */, meta[relay.Constant][162] /* ty=Tensor[(72), float32] */, meta[relay.Constant][163] /* ty=Tensor[(72), float32] */, meta[relay.Constant][164] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %179 = %178.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %180 = %168.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %181 = nn.relu(%179) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %182 = (%180, %181) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %183 = concatenate(%182, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %184 = reshape(%183, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %185 = transpose(%184, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %186 = reshape(%185, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %187 = split(%186, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %188 = %187.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %189 = nn.conv2d(%188, meta[relay.Constant][165] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %190 = nn.batch_norm(%189, meta[relay.Constant][166] /* ty=Tensor[(72), float32] */, meta[relay.Constant][167] /* ty=Tensor[(72), float32] */, meta[relay.Constant][168] /* ty=Tensor[(72), float32] */, meta[relay.Constant][169] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %191 = %190.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %192 = nn.relu(%191) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %193 = nn.conv2d(%192, meta[relay.Constant][170] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %194 = nn.batch_norm(%193, meta[relay.Constant][171] /* ty=Tensor[(72), float32] */, meta[relay.Constant][172] /* ty=Tensor[(72), float32] */, meta[relay.Constant][173] /* ty=Tensor[(72), float32] */, meta[relay.Constant][174] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %195 = %194.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %196 = nn.conv2d(%195, meta[relay.Constant][175] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %197 = nn.batch_norm(%196, meta[relay.Constant][176] /* ty=Tensor[(72), float32] */, meta[relay.Constant][177] /* ty=Tensor[(72), float32] */, meta[relay.Constant][178] /* ty=Tensor[(72), float32] */, meta[relay.Constant][179] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %198 = %197.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %199 = %187.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %200 = nn.relu(%198) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %201 = (%199, %200) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %202 = concatenate(%201, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %203 = reshape(%202, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %204 = transpose(%203, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %205 = reshape(%204, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %206 = split(%205, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %207 = %206.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %208 = nn.conv2d(%207, meta[relay.Constant][180] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %209 = nn.batch_norm(%208, meta[relay.Constant][181] /* ty=Tensor[(72), float32] */, meta[relay.Constant][182] /* ty=Tensor[(72), float32] */, meta[relay.Constant][183] /* ty=Tensor[(72), float32] */, meta[relay.Constant][184] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %210 = %209.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %211 = nn.relu(%210) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %212 = nn.conv2d(%211, meta[relay.Constant][185] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %213 = nn.batch_norm(%212, meta[relay.Constant][186] /* ty=Tensor[(72), float32] */, meta[relay.Constant][187] /* ty=Tensor[(72), float32] */, meta[relay.Constant][188] /* ty=Tensor[(72), float32] */, meta[relay.Constant][189] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %214 = %213.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %215 = nn.conv2d(%214, meta[relay.Constant][190] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %216 = nn.batch_norm(%215, meta[relay.Constant][191] /* ty=Tensor[(72), float32] */, meta[relay.Constant][192] /* ty=Tensor[(72), float32] */, meta[relay.Constant][193] /* ty=Tensor[(72), float32] */, meta[relay.Constant][194] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %217 = %216.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %218 = %206.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %219 = nn.relu(%217) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %220 = (%218, %219) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %221 = concatenate(%220, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %222 = reshape(%221, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %223 = transpose(%222, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %224 = reshape(%223, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %225 = split(%224, indices_or_sections=2, axis=1) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %226 = %225.1 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %227 = nn.conv2d(%226, meta[relay.Constant][195] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %228 = nn.batch_norm(%227, meta[relay.Constant][196] /* ty=Tensor[(72), float32] */, meta[relay.Constant][197] /* ty=Tensor[(72), float32] */, meta[relay.Constant][198] /* ty=Tensor[(72), float32] */, meta[relay.Constant][199] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %229 = %228.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %230 = nn.relu(%229) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %231 = nn.conv2d(%230, meta[relay.Constant][200] /* ty=Tensor[(72, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %232 = nn.batch_norm(%231, meta[relay.Constant][201] /* ty=Tensor[(72), float32] */, meta[relay.Constant][202] /* ty=Tensor[(72), float32] */, meta[relay.Constant][203] /* ty=Tensor[(72), float32] */, meta[relay.Constant][204] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %233 = %232.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %234 = nn.conv2d(%233, meta[relay.Constant][205] /* ty=Tensor[(72, 72, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %235 = nn.batch_norm(%234, meta[relay.Constant][206] /* ty=Tensor[(72), float32] */, meta[relay.Constant][207] /* ty=Tensor[(72), float32] */, meta[relay.Constant][208] /* ty=Tensor[(72), float32] */, meta[relay.Constant][209] /* ty=Tensor[(72), float32] */) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %236 = %235.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %237 = %225.0 /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %238 = nn.relu(%236) /* ty=Tensor[(1, 72, 8, 8), float32] */;
  %239 = (%237, %238) /* ty=(Tensor[(1, 72, 8, 8), float32], Tensor[(1, 72, 8, 8), float32]) */;
  %240 = concatenate(%239, axis=1) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %241 = reshape(%240, newshape=[0, 2, 72, 8, 8]) /* ty=Tensor[(1, 2, 72, 8, 8), float32] */;
  %242 = transpose(%241, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 72, 2, 8, 8), float32] */;
  %243 = reshape(%242, newshape=[0, 144, 8, 8]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %244 = nn.conv2d(%243, meta[relay.Constant][210] /* ty=Tensor[(144, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %245 = nn.batch_norm(%244, meta[relay.Constant][211] /* ty=Tensor[(144), float32] */, meta[relay.Constant][212] /* ty=Tensor[(144), float32] */, meta[relay.Constant][213] /* ty=Tensor[(144), float32] */, meta[relay.Constant][214] /* ty=Tensor[(144), float32] */) /* ty=(Tensor[(1, 144, 8, 8), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %246 = %245.0 /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %247 = nn.conv2d(%246, meta[relay.Constant][215] /* ty=Tensor[(64, 144, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %248 = nn.batch_norm(%247, meta[relay.Constant][216] /* ty=Tensor[(64), float32] */, meta[relay.Constant][217] /* ty=Tensor[(64), float32] */, meta[relay.Constant][218] /* ty=Tensor[(64), float32] */, meta[relay.Constant][219] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 8, 8), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %249 = %248.0 /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %250 = nn.relu(%249) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %251 = nn.relu(%6) /* ty=Tensor[(1, 18, 64, 64), float32] */;
  %252 = image.resize2d(%250, size=[64, 64], roi=[0f, 0f, 0f, 0f], rounding_method="round_prefer_floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %253 = (%251, %252) /* ty=(Tensor[(1, 18, 64, 64), float32], Tensor[(1, 64, 64, 64), float32]) */;
  %254 = concatenate(%253, axis=1) /* ty=Tensor[(1, 82, 64, 64), float32] */;
  %255 = nn.conv2d(%254, meta[relay.Constant][220] /* ty=Tensor[(82, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=82, channels=82, kernel_size=[3, 3]) /* ty=Tensor[(1, 82, 64, 64), float32] */;
  %256 = nn.batch_norm(%255, meta[relay.Constant][221] /* ty=Tensor[(82), float32] */, meta[relay.Constant][222] /* ty=Tensor[(82), float32] */, meta[relay.Constant][223] /* ty=Tensor[(82), float32] */, meta[relay.Constant][224] /* ty=Tensor[(82), float32] */) /* ty=(Tensor[(1, 82, 64, 64), float32], Tensor[(82), float32], Tensor[(82), float32]) */;
  %257 = %256.0 /* ty=Tensor[(1, 82, 64, 64), float32] */;
  %258 = nn.conv2d(%257, meta[relay.Constant][225] /* ty=Tensor[(64, 82, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %259 = nn.batch_norm(%258, meta[relay.Constant][226] /* ty=Tensor[(64), float32] */, meta[relay.Constant][227] /* ty=Tensor[(64), float32] */, meta[relay.Constant][228] /* ty=Tensor[(64), float32] */, meta[relay.Constant][229] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 64, 64), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %260 = %259.0 /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %261 = nn.relu(%260) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %262 = nn.conv2d(%261, meta[relay.Constant][230] /* ty=Tensor[(64, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %263 = nn.batch_norm(%262, meta[relay.Constant][231] /* ty=Tensor[(64), float32] */, meta[relay.Constant][232] /* ty=Tensor[(64), float32] */, meta[relay.Constant][233] /* ty=Tensor[(64), float32] */, meta[relay.Constant][234] /* ty=Tensor[(64), float32] */) /* ty=(Tensor[(1, 64, 64, 64), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %264 = %263.0 /* ty=Tensor[(1, 64, 64, 64), float32] */;
  %265 = nn.conv2d(%264, meta[relay.Constant][235] /* ty=Tensor[(2, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=2, kernel_size=[1, 1]) /* ty=Tensor[(1, 2, 64, 64), float32] */;
  %266 = nn.batch_norm(%265, meta[relay.Constant][236] /* ty=Tensor[(2), float32] */, meta[relay.Constant][237] /* ty=Tensor[(2), float32] */, meta[relay.Constant][238] /* ty=Tensor[(2), float32] */, meta[relay.Constant][239] /* ty=Tensor[(2), float32] */) /* ty=(Tensor[(1, 2, 64, 64), float32], Tensor[(2), float32], Tensor[(2), float32]) */;
  %267 = %266.0 /* ty=Tensor[(1, 2, 64, 64), float32] */;
  %268 = nn.relu(%267) /* ty=Tensor[(1, 2, 64, 64), float32] */;
  %269 = image.resize2d(%268, size=[128, 128], roi=[0f, 0f, 0f, 0f], rounding_method="round_prefer_floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 2, 128, 128), float32] */;
  %270 = argmax(%269, axis=[1]) /* ty=Tensor[(1, 128, 128), int32] */;
  cast(%270, dtype="int64") /* ty=Tensor[(1, 128, 128), int64] */
}

