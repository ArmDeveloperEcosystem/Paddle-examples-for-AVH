def @main(%image: Tensor[(1, 3, 320, 320), float32] /* ty=Tensor[(1, 3, 320, 320), float32] */) -> (Tensor[(1, 2125, 4), float32], Tensor[(1, 80, 2125), float32]) {
  %0 = nn.conv2d(%image, meta[relay.Constant][0] /* ty=Tensor[(16, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %1 = nn.batch_norm(%0, meta[relay.Constant][1] /* ty=Tensor[(16), float32] */, meta[relay.Constant][2] /* ty=Tensor[(16), float32] */, meta[relay.Constant][3] /* ty=Tensor[(16), float32] */, meta[relay.Constant][4] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 160, 160), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %2 = %1.0 /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %3 = add(%2, 3f /* ty=float32 */) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %4 = clip(%3, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %5 = multiply(%2, %4) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %6 = divide(%5, 6f /* ty=float32 */) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][5] /* ty=Tensor[(16, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=16, channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %8 = nn.batch_norm(%7, meta[relay.Constant][6] /* ty=Tensor[(16), float32] */, meta[relay.Constant][7] /* ty=Tensor[(16), float32] */, meta[relay.Constant][8] /* ty=Tensor[(16), float32] */, meta[relay.Constant][9] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 160, 160), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %9 = %8.0 /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %10 = add(%9, 3f /* ty=float32 */) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %11 = clip(%10, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %12 = multiply(%9, %11) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %13 = divide(%12, 6f /* ty=float32 */) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %14 = nn.conv2d(%13, meta[relay.Constant][10] /* ty=Tensor[(24, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %15 = nn.batch_norm(%14, meta[relay.Constant][11] /* ty=Tensor[(24), float32] */, meta[relay.Constant][12] /* ty=Tensor[(24), float32] */, meta[relay.Constant][13] /* ty=Tensor[(24), float32] */, meta[relay.Constant][14] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 160, 160), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %16 = %15.0 /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %17 = add(%16, 3f /* ty=float32 */) /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %19 = multiply(%16, %18) /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %20 = divide(%19, 6f /* ty=float32 */) /* ty=Tensor[(1, 24, 160, 160), float32] */;
  %21 = nn.conv2d(%20, meta[relay.Constant][15] /* ty=Tensor[(24, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=24, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %22 = nn.batch_norm(%21, meta[relay.Constant][16] /* ty=Tensor[(24), float32] */, meta[relay.Constant][17] /* ty=Tensor[(24), float32] */, meta[relay.Constant][18] /* ty=Tensor[(24), float32] */, meta[relay.Constant][19] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 80, 80), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %23 = %22.0 /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %24 = add(%23, 3f /* ty=float32 */) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %25 = clip(%24, a_min=0f, a_max=6f) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %26 = multiply(%23, %25) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %27 = divide(%26, 6f /* ty=float32 */) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][20] /* ty=Tensor[(48, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %29 = nn.batch_norm(%28, meta[relay.Constant][21] /* ty=Tensor[(48), float32] */, meta[relay.Constant][22] /* ty=Tensor[(48), float32] */, meta[relay.Constant][23] /* ty=Tensor[(48), float32] */, meta[relay.Constant][24] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 80, 80), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %30 = %29.0 /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %31 = add(%30, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %32 = clip(%31, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %33 = multiply(%30, %32) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %34 = divide(%33, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %35 = nn.conv2d(%34, meta[relay.Constant][25] /* ty=Tensor[(48, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %36 = nn.batch_norm(%35, meta[relay.Constant][26] /* ty=Tensor[(48), float32] */, meta[relay.Constant][27] /* ty=Tensor[(48), float32] */, meta[relay.Constant][28] /* ty=Tensor[(48), float32] */, meta[relay.Constant][29] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 80, 80), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %37 = %36.0 /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %38 = add(%37, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %40 = multiply(%37, %39) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %41 = divide(%40, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][30] /* ty=Tensor[(48, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %43 = nn.batch_norm(%42, meta[relay.Constant][31] /* ty=Tensor[(48), float32] */, meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, meta[relay.Constant][33] /* ty=Tensor[(48), float32] */, meta[relay.Constant][34] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 80, 80), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %44 = %43.0 /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %45 = add(%44, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %46 = clip(%45, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %47 = multiply(%44, %46) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %48 = divide(%47, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 80, 80), float32] */;
  %49 = nn.conv2d(%48, meta[relay.Constant][35] /* ty=Tensor[(48, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %50 = nn.batch_norm(%49, meta[relay.Constant][36] /* ty=Tensor[(48), float32] */, meta[relay.Constant][37] /* ty=Tensor[(48), float32] */, meta[relay.Constant][38] /* ty=Tensor[(48), float32] */, meta[relay.Constant][39] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 40, 40), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %51 = %50.0 /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %52 = add(%51, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %54 = multiply(%51, %53) /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %55 = divide(%54, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 40, 40), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][40] /* ty=Tensor[(96, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %57 = nn.batch_norm(%56, meta[relay.Constant][41] /* ty=Tensor[(96), float32] */, meta[relay.Constant][42] /* ty=Tensor[(96), float32] */, meta[relay.Constant][43] /* ty=Tensor[(96), float32] */, meta[relay.Constant][44] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %58 = %57.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %59 = add(%58, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %60 = clip(%59, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %61 = multiply(%58, %60) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %62 = divide(%61, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %63 = nn.conv2d(%62, meta[relay.Constant][45] /* ty=Tensor[(96, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %64 = nn.batch_norm(%63, meta[relay.Constant][46] /* ty=Tensor[(96), float32] */, meta[relay.Constant][47] /* ty=Tensor[(96), float32] */, meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, meta[relay.Constant][49] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %65 = %64.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %66 = add(%65, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %67 = clip(%66, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %68 = multiply(%65, %67) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %69 = divide(%68, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %70 = nn.conv2d(%69, meta[relay.Constant][50] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %71 = nn.batch_norm(%70, meta[relay.Constant][51] /* ty=Tensor[(96), float32] */, meta[relay.Constant][52] /* ty=Tensor[(96), float32] */, meta[relay.Constant][53] /* ty=Tensor[(96), float32] */, meta[relay.Constant][54] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %72 = %71.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %73 = add(%72, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %74 = clip(%73, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %75 = multiply(%72, %74) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %76 = divide(%75, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %77 = nn.conv2d(%76, meta[relay.Constant][55] /* ty=Tensor[(96, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %78 = nn.batch_norm(%77, meta[relay.Constant][56] /* ty=Tensor[(96), float32] */, meta[relay.Constant][57] /* ty=Tensor[(96), float32] */, meta[relay.Constant][58] /* ty=Tensor[(96), float32] */, meta[relay.Constant][59] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %79 = %78.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %80 = add(%79, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %81 = clip(%80, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %82 = multiply(%79, %81) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %83 = divide(%82, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %84 = nn.conv2d(%83, meta[relay.Constant][60] /* ty=Tensor[(192, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %85 = nn.batch_norm(%84, meta[relay.Constant][61] /* ty=Tensor[(192), float32] */, meta[relay.Constant][62] /* ty=Tensor[(192), float32] */, meta[relay.Constant][63] /* ty=Tensor[(192), float32] */, meta[relay.Constant][64] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %86 = %85.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %87 = add(%86, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %89 = multiply(%86, %88) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %90 = divide(%89, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][65] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %92 = nn.batch_norm(%91, meta[relay.Constant][66] /* ty=Tensor[(192), float32] */, meta[relay.Constant][67] /* ty=Tensor[(192), float32] */, meta[relay.Constant][68] /* ty=Tensor[(192), float32] */, meta[relay.Constant][69] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %93 = %92.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %94 = add(%93, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %95 = clip(%94, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %96 = multiply(%93, %95) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %97 = divide(%96, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %98 = nn.conv2d(%97, meta[relay.Constant][70] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %99 = nn.batch_norm(%98, meta[relay.Constant][71] /* ty=Tensor[(192), float32] */, meta[relay.Constant][72] /* ty=Tensor[(192), float32] */, meta[relay.Constant][73] /* ty=Tensor[(192), float32] */, meta[relay.Constant][74] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %100 = %99.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %101 = add(%100, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %103 = multiply(%100, %102) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %104 = divide(%103, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %105 = nn.conv2d(%104, meta[relay.Constant][75] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %106 = nn.batch_norm(%105, meta[relay.Constant][76] /* ty=Tensor[(192), float32] */, meta[relay.Constant][77] /* ty=Tensor[(192), float32] */, meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, meta[relay.Constant][79] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %107 = %106.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %108 = add(%107, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %109 = clip(%108, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %110 = multiply(%107, %109) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %111 = divide(%110, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %112 = nn.conv2d(%111, meta[relay.Constant][80] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %113 = nn.batch_norm(%112, meta[relay.Constant][81] /* ty=Tensor[(192), float32] */, meta[relay.Constant][82] /* ty=Tensor[(192), float32] */, meta[relay.Constant][83] /* ty=Tensor[(192), float32] */, meta[relay.Constant][84] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %114 = %113.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %115 = add(%114, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %116 = clip(%115, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %117 = multiply(%114, %116) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %118 = divide(%117, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %119 = nn.conv2d(%118, meta[relay.Constant][85] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %120 = nn.batch_norm(%119, meta[relay.Constant][86] /* ty=Tensor[(192), float32] */, meta[relay.Constant][87] /* ty=Tensor[(192), float32] */, meta[relay.Constant][88] /* ty=Tensor[(192), float32] */, meta[relay.Constant][89] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %121 = %120.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %122 = add(%121, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %123 = clip(%122, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %124 = multiply(%121, %123) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %125 = divide(%124, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %126 = nn.conv2d(%125, meta[relay.Constant][90] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %127 = nn.batch_norm(%126, meta[relay.Constant][91] /* ty=Tensor[(192), float32] */, meta[relay.Constant][92] /* ty=Tensor[(192), float32] */, meta[relay.Constant][93] /* ty=Tensor[(192), float32] */, meta[relay.Constant][94] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %128 = %127.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %129 = add(%128, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %130 = clip(%129, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %131 = multiply(%128, %130) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %132 = divide(%131, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %133 = nn.conv2d(%132, meta[relay.Constant][95] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %134 = nn.batch_norm(%133, meta[relay.Constant][96] /* ty=Tensor[(192), float32] */, meta[relay.Constant][97] /* ty=Tensor[(192), float32] */, meta[relay.Constant][98] /* ty=Tensor[(192), float32] */, meta[relay.Constant][99] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %135 = %134.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %136 = add(%135, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %137 = clip(%136, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %138 = multiply(%135, %137) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %139 = divide(%138, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %140 = nn.conv2d(%139, meta[relay.Constant][100] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %141 = nn.batch_norm(%140, meta[relay.Constant][101] /* ty=Tensor[(192), float32] */, meta[relay.Constant][102] /* ty=Tensor[(192), float32] */, meta[relay.Constant][103] /* ty=Tensor[(192), float32] */, meta[relay.Constant][104] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %142 = %141.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %143 = add(%142, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %144 = clip(%143, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %145 = multiply(%142, %144) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %146 = divide(%145, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %147 = nn.conv2d(%146, meta[relay.Constant][105] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %148 = nn.batch_norm(%147, meta[relay.Constant][106] /* ty=Tensor[(192), float32] */, meta[relay.Constant][107] /* ty=Tensor[(192), float32] */, meta[relay.Constant][108] /* ty=Tensor[(192), float32] */, meta[relay.Constant][109] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %149 = %148.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %150 = add(%149, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %151 = clip(%150, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %152 = multiply(%149, %151) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %153 = divide(%152, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %154 = nn.conv2d(%153, meta[relay.Constant][110] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %155 = nn.batch_norm(%154, meta[relay.Constant][111] /* ty=Tensor[(192), float32] */, meta[relay.Constant][112] /* ty=Tensor[(192), float32] */, meta[relay.Constant][113] /* ty=Tensor[(192), float32] */, meta[relay.Constant][114] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %156 = %155.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %157 = add(%156, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %158 = clip(%157, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %159 = multiply(%156, %158) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %160 = divide(%159, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %161 = nn.conv2d(%160, meta[relay.Constant][115] /* ty=Tensor[(192, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %162 = nn.batch_norm(%161, meta[relay.Constant][116] /* ty=Tensor[(192), float32] */, meta[relay.Constant][117] /* ty=Tensor[(192), float32] */, meta[relay.Constant][118] /* ty=Tensor[(192), float32] */, meta[relay.Constant][119] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 10, 10), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %163 = %162.0 /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %164 = add(%163, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %165 = clip(%164, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %166 = multiply(%163, %165) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %167 = divide(%166, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %168 = nn.global_avg_pool2d(%167) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %169 = nn.conv2d(%168, meta[relay.Constant][120] /* ty=Tensor[(48, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %170 = nn.bias_add(%169, meta[relay.Constant][121] /* ty=Tensor[(48), float32] */) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %171 = nn.relu(%170) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %172 = nn.conv2d(%171, meta[relay.Constant][122] /* ty=Tensor[(192, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %173 = nn.bias_add(%172, meta[relay.Constant][123] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %174 = multiply(%173, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %175 = add(%174, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %176 = clip(%175, a_min=0f, a_max=1f) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %177 = multiply(%167, %176) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %178 = nn.conv2d(%177, meta[relay.Constant][124] /* ty=Tensor[(384, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %179 = nn.batch_norm(%178, meta[relay.Constant][125] /* ty=Tensor[(384), float32] */, meta[relay.Constant][126] /* ty=Tensor[(384), float32] */, meta[relay.Constant][127] /* ty=Tensor[(384), float32] */, meta[relay.Constant][128] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 10, 10), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %180 = %179.0 /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %181 = add(%180, 3f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %182 = clip(%181, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %183 = multiply(%180, %182) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %184 = divide(%183, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %185 = nn.conv2d(%184, meta[relay.Constant][129] /* ty=Tensor[(384, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=384, channels=384, kernel_size=[5, 5]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %186 = nn.batch_norm(%185, meta[relay.Constant][130] /* ty=Tensor[(384), float32] */, meta[relay.Constant][131] /* ty=Tensor[(384), float32] */, meta[relay.Constant][132] /* ty=Tensor[(384), float32] */, meta[relay.Constant][133] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 10, 10), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %187 = %186.0 /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %188 = add(%187, 3f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %189 = clip(%188, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %190 = multiply(%187, %189) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %191 = divide(%190, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %192 = nn.global_avg_pool2d(%191) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %193 = nn.conv2d(%192, meta[relay.Constant][134] /* ty=Tensor[(96, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %194 = nn.bias_add(%193, meta[relay.Constant][135] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %195 = nn.relu(%194) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %196 = nn.conv2d(%195, meta[relay.Constant][136] /* ty=Tensor[(384, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %197 = nn.bias_add(%196, meta[relay.Constant][137] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %198 = multiply(%197, 0.166667f /* ty=float32 */) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %199 = add(%198, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %200 = clip(%199, a_min=0f, a_max=1f) /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %201 = multiply(%191, %200) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %202 = nn.conv2d(%201, meta[relay.Constant][138] /* ty=Tensor[(384, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %203 = nn.batch_norm(%202, meta[relay.Constant][139] /* ty=Tensor[(384), float32] */, meta[relay.Constant][140] /* ty=Tensor[(384), float32] */, meta[relay.Constant][141] /* ty=Tensor[(384), float32] */, meta[relay.Constant][142] /* ty=Tensor[(384), float32] */) /* ty=(Tensor[(1, 384, 10, 10), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %204 = %203.0 /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %205 = add(%204, 3f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %206 = clip(%205, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %207 = multiply(%204, %206) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %208 = divide(%207, 6f /* ty=float32 */) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %209 = nn.conv2d(%208, meta[relay.Constant][143] /* ty=Tensor[(96, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %210 = nn.batch_norm(%209, meta[relay.Constant][144] /* ty=Tensor[(96), float32] */, meta[relay.Constant][145] /* ty=Tensor[(96), float32] */, meta[relay.Constant][146] /* ty=Tensor[(96), float32] */, meta[relay.Constant][147] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %211 = %210.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %212 = add(%211, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %213 = clip(%212, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %214 = multiply(%211, %213) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %215 = divide(%214, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %216 = nn.conv2d(%160, meta[relay.Constant][148] /* ty=Tensor[(96, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %217 = nn.batch_norm(%216, meta[relay.Constant][149] /* ty=Tensor[(96), float32] */, meta[relay.Constant][150] /* ty=Tensor[(96), float32] */, meta[relay.Constant][151] /* ty=Tensor[(96), float32] */, meta[relay.Constant][152] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %218 = %217.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %219 = add(%218, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %220 = clip(%219, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %221 = multiply(%218, %220) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %222 = image.resize2d(%215, size=[20, 20], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %223 = divide(%221, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %224 = (%222, %223) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(1, 96, 20, 20), float32]) */;
  %225 = concatenate(%224, axis=1) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %226 = nn.conv2d(%225, meta[relay.Constant][153] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %227 = nn.batch_norm(%226, meta[relay.Constant][154] /* ty=Tensor[(192), float32] */, meta[relay.Constant][155] /* ty=Tensor[(192), float32] */, meta[relay.Constant][156] /* ty=Tensor[(192), float32] */, meta[relay.Constant][157] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %228 = %227.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %229 = add(%228, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %230 = clip(%229, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %231 = multiply(%228, %230) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %232 = divide(%231, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %233 = nn.conv2d(%232, meta[relay.Constant][158] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %234 = nn.batch_norm(%233, meta[relay.Constant][159] /* ty=Tensor[(192), float32] */, meta[relay.Constant][160] /* ty=Tensor[(192), float32] */, meta[relay.Constant][161] /* ty=Tensor[(192), float32] */, meta[relay.Constant][162] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %235 = %234.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %236 = add(%235, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %237 = clip(%236, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %238 = multiply(%235, %237) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %239 = divide(%238, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %240 = nn.conv2d(%239, meta[relay.Constant][163] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %241 = nn.batch_norm(%240, meta[relay.Constant][164] /* ty=Tensor[(192), float32] */, meta[relay.Constant][165] /* ty=Tensor[(192), float32] */, meta[relay.Constant][166] /* ty=Tensor[(192), float32] */, meta[relay.Constant][167] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %242 = %241.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %243 = add(%242, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %244 = clip(%243, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %245 = multiply(%242, %244) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %246 = divide(%245, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %247 = nn.conv2d(%246, meta[relay.Constant][168] /* ty=Tensor[(96, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %248 = nn.batch_norm(%247, meta[relay.Constant][169] /* ty=Tensor[(96), float32] */, meta[relay.Constant][170] /* ty=Tensor[(96), float32] */, meta[relay.Constant][171] /* ty=Tensor[(96), float32] */, meta[relay.Constant][172] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %249 = %248.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %250 = add(%249, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %251 = clip(%250, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %252 = multiply(%249, %251) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %253 = divide(%252, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %254 = nn.conv2d(%76, meta[relay.Constant][173] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %255 = nn.batch_norm(%254, meta[relay.Constant][174] /* ty=Tensor[(96), float32] */, meta[relay.Constant][175] /* ty=Tensor[(96), float32] */, meta[relay.Constant][176] /* ty=Tensor[(96), float32] */, meta[relay.Constant][177] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %256 = %255.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %257 = add(%256, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %258 = clip(%257, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %259 = multiply(%256, %258) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %260 = image.resize2d(%253, size=[40, 40], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %261 = divide(%259, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %262 = (%260, %261) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(1, 96, 40, 40), float32]) */;
  %263 = concatenate(%262, axis=1) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %264 = nn.conv2d(%263, meta[relay.Constant][178] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %265 = nn.batch_norm(%264, meta[relay.Constant][179] /* ty=Tensor[(192), float32] */, meta[relay.Constant][180] /* ty=Tensor[(192), float32] */, meta[relay.Constant][181] /* ty=Tensor[(192), float32] */, meta[relay.Constant][182] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 40, 40), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %266 = %265.0 /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %267 = add(%266, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %268 = clip(%267, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %269 = multiply(%266, %268) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %270 = divide(%269, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %271 = nn.conv2d(%270, meta[relay.Constant][183] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %272 = nn.batch_norm(%271, meta[relay.Constant][184] /* ty=Tensor[(192), float32] */, meta[relay.Constant][185] /* ty=Tensor[(192), float32] */, meta[relay.Constant][186] /* ty=Tensor[(192), float32] */, meta[relay.Constant][187] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 40, 40), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %273 = %272.0 /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %274 = add(%273, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %275 = clip(%274, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %276 = multiply(%273, %275) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %277 = divide(%276, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %278 = nn.conv2d(%277, meta[relay.Constant][188] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %279 = nn.batch_norm(%278, meta[relay.Constant][189] /* ty=Tensor[(192), float32] */, meta[relay.Constant][190] /* ty=Tensor[(192), float32] */, meta[relay.Constant][191] /* ty=Tensor[(192), float32] */, meta[relay.Constant][192] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 40, 40), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %280 = %279.0 /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %281 = add(%280, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %282 = clip(%281, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %283 = multiply(%280, %282) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %284 = divide(%283, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %285 = nn.conv2d(%284, meta[relay.Constant][193] /* ty=Tensor[(96, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %286 = nn.batch_norm(%285, meta[relay.Constant][194] /* ty=Tensor[(96), float32] */, meta[relay.Constant][195] /* ty=Tensor[(96), float32] */, meta[relay.Constant][196] /* ty=Tensor[(96), float32] */, meta[relay.Constant][197] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %287 = %286.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %288 = add(%287, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %289 = clip(%288, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %290 = multiply(%287, %289) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %291 = divide(%290, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %292 = nn.conv2d(%291, meta[relay.Constant][198] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %293 = nn.batch_norm(%292, meta[relay.Constant][199] /* ty=Tensor[(96), float32] */, meta[relay.Constant][200] /* ty=Tensor[(96), float32] */, meta[relay.Constant][201] /* ty=Tensor[(96), float32] */, meta[relay.Constant][202] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %294 = %293.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %295 = add(%294, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %296 = clip(%295, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %297 = multiply(%294, %296) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %298 = divide(%297, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %299 = nn.conv2d(%298, meta[relay.Constant][203] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %300 = nn.batch_norm(%299, meta[relay.Constant][204] /* ty=Tensor[(96), float32] */, meta[relay.Constant][205] /* ty=Tensor[(96), float32] */, meta[relay.Constant][206] /* ty=Tensor[(96), float32] */, meta[relay.Constant][207] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %301 = %300.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %302 = add(%301, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %303 = clip(%302, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %304 = multiply(%301, %303) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %305 = divide(%304, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %306 = nn.conv2d(%305, meta[relay.Constant][208] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %307 = nn.batch_norm(%306, meta[relay.Constant][209] /* ty=Tensor[(96), float32] */, meta[relay.Constant][210] /* ty=Tensor[(96), float32] */, meta[relay.Constant][211] /* ty=Tensor[(96), float32] */, meta[relay.Constant][212] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %308 = %307.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %309 = add(%308, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %310 = clip(%309, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %311 = multiply(%308, %310) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %312 = divide(%311, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %313 = nn.conv2d(%312, meta[relay.Constant][213] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %314 = nn.batch_norm(%313, meta[relay.Constant][214] /* ty=Tensor[(96), float32] */, meta[relay.Constant][215] /* ty=Tensor[(96), float32] */, meta[relay.Constant][216] /* ty=Tensor[(96), float32] */, meta[relay.Constant][217] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %315 = %314.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %316 = add(%315, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %317 = clip(%316, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %318 = multiply(%315, %317) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %319 = divide(%318, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %320 = nn.global_avg_pool2d(%319) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %321 = nn.conv2d(%320, meta[relay.Constant][218] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %322 = nn.bias_add(%321, meta[relay.Constant][219] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %323 = sigmoid(%322) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %324 = multiply(%319, %323) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %325 = nn.conv2d(%324, meta[relay.Constant][220] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %326 = nn.batch_norm(%325, meta[relay.Constant][221] /* ty=Tensor[(96), float32] */, meta[relay.Constant][222] /* ty=Tensor[(96), float32] */, meta[relay.Constant][223] /* ty=Tensor[(96), float32] */, meta[relay.Constant][224] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 40, 40), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %327 = %326.0 /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %328 = add(%327, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %329 = clip(%328, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %330 = multiply(%327, %329) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %331 = divide(%330, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 40, 40), float32] */;
  %332 = nn.conv2d(%331, meta[relay.Constant][225] /* ty=Tensor[(32, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %333 = nn.bias_add(%332, meta[relay.Constant][226] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %334 = transpose(%333, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 40, 40, 32), float32] */;
  %335 = reshape(%334, newshape=[-1, 8]) /* ty=Tensor[(6400, 8), float32] */;
  %336 = nn.softmax(%335, axis=1) /* ty=Tensor[(6400, 8), float32] */;
  %337 = nn.matmul(%336, meta[relay.Constant][227] /* ty=Tensor[(8, 1), float32] */, units=None) /* ty=Tensor[(6400, 1), float32] */;
  %338 = squeeze(%337, axis=[-1]) /* ty=Tensor[(6400), float32] */;
  %339 = nn.conv2d(%291, meta[relay.Constant][228] /* ty=Tensor[(96, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %340 = nn.batch_norm(%339, meta[relay.Constant][229] /* ty=Tensor[(96), float32] */, meta[relay.Constant][230] /* ty=Tensor[(96), float32] */, meta[relay.Constant][231] /* ty=Tensor[(96), float32] */, meta[relay.Constant][232] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %341 = %340.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %342 = add(%341, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %343 = clip(%342, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %344 = multiply(%341, %343) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %345 = divide(%344, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %346 = nn.conv2d(%345, meta[relay.Constant][233] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %347 = nn.batch_norm(%346, meta[relay.Constant][234] /* ty=Tensor[(96), float32] */, meta[relay.Constant][235] /* ty=Tensor[(96), float32] */, meta[relay.Constant][236] /* ty=Tensor[(96), float32] */, meta[relay.Constant][237] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %348 = %347.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %349 = add(%348, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %350 = clip(%349, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %351 = multiply(%348, %350) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %352 = divide(%351, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %353 = (%352, %253) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(1, 96, 20, 20), float32]) */;
  %354 = concatenate(%353, axis=1) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %355 = nn.conv2d(%354, meta[relay.Constant][238] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %356 = nn.batch_norm(%355, meta[relay.Constant][239] /* ty=Tensor[(192), float32] */, meta[relay.Constant][240] /* ty=Tensor[(192), float32] */, meta[relay.Constant][241] /* ty=Tensor[(192), float32] */, meta[relay.Constant][242] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %357 = %356.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %358 = add(%357, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %359 = clip(%358, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %360 = multiply(%357, %359) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %361 = divide(%360, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %362 = nn.conv2d(%361, meta[relay.Constant][243] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %363 = nn.batch_norm(%362, meta[relay.Constant][244] /* ty=Tensor[(192), float32] */, meta[relay.Constant][245] /* ty=Tensor[(192), float32] */, meta[relay.Constant][246] /* ty=Tensor[(192), float32] */, meta[relay.Constant][247] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %364 = %363.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %365 = add(%364, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %366 = clip(%365, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %367 = multiply(%364, %366) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %368 = divide(%367, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %369 = nn.conv2d(%368, meta[relay.Constant][248] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %370 = nn.batch_norm(%369, meta[relay.Constant][249] /* ty=Tensor[(192), float32] */, meta[relay.Constant][250] /* ty=Tensor[(192), float32] */, meta[relay.Constant][251] /* ty=Tensor[(192), float32] */, meta[relay.Constant][252] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 20, 20), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %371 = %370.0 /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %372 = add(%371, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %373 = clip(%372, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %374 = multiply(%371, %373) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %375 = divide(%374, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %376 = nn.conv2d(%375, meta[relay.Constant][253] /* ty=Tensor[(96, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %377 = nn.batch_norm(%376, meta[relay.Constant][254] /* ty=Tensor[(96), float32] */, meta[relay.Constant][255] /* ty=Tensor[(96), float32] */, meta[relay.Constant][256] /* ty=Tensor[(96), float32] */, meta[relay.Constant][257] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %378 = %377.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %379 = add(%378, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %380 = clip(%379, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %381 = multiply(%378, %380) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %382 = divide(%381, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %383 = nn.conv2d(%382, meta[relay.Constant][258] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %384 = nn.batch_norm(%383, meta[relay.Constant][259] /* ty=Tensor[(96), float32] */, meta[relay.Constant][260] /* ty=Tensor[(96), float32] */, meta[relay.Constant][261] /* ty=Tensor[(96), float32] */, meta[relay.Constant][262] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %385 = %384.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %386 = add(%385, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %387 = clip(%386, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %388 = multiply(%385, %387) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %389 = divide(%388, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %390 = nn.conv2d(%389, meta[relay.Constant][263] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %391 = nn.batch_norm(%390, meta[relay.Constant][264] /* ty=Tensor[(96), float32] */, meta[relay.Constant][265] /* ty=Tensor[(96), float32] */, meta[relay.Constant][266] /* ty=Tensor[(96), float32] */, meta[relay.Constant][267] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %392 = %391.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %393 = add(%392, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %394 = clip(%393, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %395 = multiply(%392, %394) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %396 = divide(%395, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %397 = nn.conv2d(%396, meta[relay.Constant][268] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %398 = nn.batch_norm(%397, meta[relay.Constant][269] /* ty=Tensor[(96), float32] */, meta[relay.Constant][270] /* ty=Tensor[(96), float32] */, meta[relay.Constant][271] /* ty=Tensor[(96), float32] */, meta[relay.Constant][272] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %399 = %398.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %400 = add(%399, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %401 = clip(%400, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %402 = multiply(%399, %401) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %403 = divide(%402, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %404 = nn.conv2d(%403, meta[relay.Constant][273] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %405 = nn.batch_norm(%404, meta[relay.Constant][274] /* ty=Tensor[(96), float32] */, meta[relay.Constant][275] /* ty=Tensor[(96), float32] */, meta[relay.Constant][276] /* ty=Tensor[(96), float32] */, meta[relay.Constant][277] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %406 = %405.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %407 = add(%406, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %408 = clip(%407, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %409 = multiply(%406, %408) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %410 = divide(%409, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %411 = nn.global_avg_pool2d(%410) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %412 = nn.conv2d(%411, meta[relay.Constant][278] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %413 = nn.bias_add(%412, meta[relay.Constant][279] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %414 = sigmoid(%413) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %415 = multiply(%410, %414) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %416 = nn.conv2d(%415, meta[relay.Constant][280] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %417 = nn.batch_norm(%416, meta[relay.Constant][281] /* ty=Tensor[(96), float32] */, meta[relay.Constant][282] /* ty=Tensor[(96), float32] */, meta[relay.Constant][283] /* ty=Tensor[(96), float32] */, meta[relay.Constant][284] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 20, 20), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %418 = %417.0 /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %419 = add(%418, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %420 = clip(%419, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %421 = multiply(%418, %420) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %422 = divide(%421, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %423 = nn.conv2d(%422, meta[relay.Constant][285] /* ty=Tensor[(32, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 20, 20), float32] */;
  %424 = nn.bias_add(%423, meta[relay.Constant][286] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 20, 20), float32] */;
  %425 = transpose(%424, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 20, 20, 32), float32] */;
  %426 = reshape(%425, newshape=[-1, 8]) /* ty=Tensor[(1600, 8), float32] */;
  %427 = nn.softmax(%426, axis=1) /* ty=Tensor[(1600, 8), float32] */;
  %428 = nn.matmul(%427, meta[relay.Constant][287] /* ty=Tensor[(8, 1), float32] */, units=None) /* ty=Tensor[(1600, 1), float32] */;
  %429 = squeeze(%428, axis=[-1]) /* ty=Tensor[(1600), float32] */;
  %430 = nn.conv2d(%382, meta[relay.Constant][288] /* ty=Tensor[(96, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %431 = nn.batch_norm(%430, meta[relay.Constant][289] /* ty=Tensor[(96), float32] */, meta[relay.Constant][290] /* ty=Tensor[(96), float32] */, meta[relay.Constant][291] /* ty=Tensor[(96), float32] */, meta[relay.Constant][292] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %432 = %431.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %433 = add(%432, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %434 = clip(%433, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %435 = multiply(%432, %434) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %436 = divide(%435, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %437 = nn.conv2d(%436, meta[relay.Constant][293] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %438 = nn.batch_norm(%437, meta[relay.Constant][294] /* ty=Tensor[(96), float32] */, meta[relay.Constant][295] /* ty=Tensor[(96), float32] */, meta[relay.Constant][296] /* ty=Tensor[(96), float32] */, meta[relay.Constant][297] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %439 = %438.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %440 = add(%439, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %441 = clip(%440, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %442 = multiply(%439, %441) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %443 = divide(%442, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %444 = (%443, %215) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(1, 96, 10, 10), float32]) */;
  %445 = concatenate(%444, axis=1) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %446 = nn.conv2d(%445, meta[relay.Constant][298] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %447 = nn.batch_norm(%446, meta[relay.Constant][299] /* ty=Tensor[(192), float32] */, meta[relay.Constant][300] /* ty=Tensor[(192), float32] */, meta[relay.Constant][301] /* ty=Tensor[(192), float32] */, meta[relay.Constant][302] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 10, 10), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %448 = %447.0 /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %449 = add(%448, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %450 = clip(%449, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %451 = multiply(%448, %450) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %452 = divide(%451, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %453 = nn.conv2d(%452, meta[relay.Constant][303] /* ty=Tensor[(192, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %454 = nn.batch_norm(%453, meta[relay.Constant][304] /* ty=Tensor[(192), float32] */, meta[relay.Constant][305] /* ty=Tensor[(192), float32] */, meta[relay.Constant][306] /* ty=Tensor[(192), float32] */, meta[relay.Constant][307] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 10, 10), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %455 = %454.0 /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %456 = add(%455, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %457 = clip(%456, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %458 = multiply(%455, %457) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %459 = divide(%458, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %460 = nn.conv2d(%459, meta[relay.Constant][308] /* ty=Tensor[(192, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=192, channels=192, kernel_size=[5, 5]) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %461 = nn.batch_norm(%460, meta[relay.Constant][309] /* ty=Tensor[(192), float32] */, meta[relay.Constant][310] /* ty=Tensor[(192), float32] */, meta[relay.Constant][311] /* ty=Tensor[(192), float32] */, meta[relay.Constant][312] /* ty=Tensor[(192), float32] */) /* ty=(Tensor[(1, 192, 10, 10), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %462 = %461.0 /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %463 = add(%462, 3f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %464 = clip(%463, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %465 = multiply(%462, %464) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %466 = divide(%465, 6f /* ty=float32 */) /* ty=Tensor[(1, 192, 10, 10), float32] */;
  %467 = nn.conv2d(%466, meta[relay.Constant][313] /* ty=Tensor[(96, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %468 = nn.batch_norm(%467, meta[relay.Constant][314] /* ty=Tensor[(96), float32] */, meta[relay.Constant][315] /* ty=Tensor[(96), float32] */, meta[relay.Constant][316] /* ty=Tensor[(96), float32] */, meta[relay.Constant][317] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %469 = %468.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %470 = add(%469, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %471 = clip(%470, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %472 = multiply(%469, %471) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %473 = divide(%472, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %474 = nn.conv2d(%473, meta[relay.Constant][318] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %475 = nn.batch_norm(%474, meta[relay.Constant][319] /* ty=Tensor[(96), float32] */, meta[relay.Constant][320] /* ty=Tensor[(96), float32] */, meta[relay.Constant][321] /* ty=Tensor[(96), float32] */, meta[relay.Constant][322] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %476 = %475.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %477 = add(%476, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %478 = clip(%477, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %479 = multiply(%476, %478) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %480 = divide(%479, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %481 = nn.conv2d(%480, meta[relay.Constant][323] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %482 = nn.batch_norm(%481, meta[relay.Constant][324] /* ty=Tensor[(96), float32] */, meta[relay.Constant][325] /* ty=Tensor[(96), float32] */, meta[relay.Constant][326] /* ty=Tensor[(96), float32] */, meta[relay.Constant][327] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %483 = %482.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %484 = add(%483, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %485 = clip(%484, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %486 = multiply(%483, %485) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %487 = divide(%486, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %488 = nn.conv2d(%487, meta[relay.Constant][328] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %489 = nn.batch_norm(%488, meta[relay.Constant][329] /* ty=Tensor[(96), float32] */, meta[relay.Constant][330] /* ty=Tensor[(96), float32] */, meta[relay.Constant][331] /* ty=Tensor[(96), float32] */, meta[relay.Constant][332] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %490 = %489.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %491 = add(%490, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %492 = clip(%491, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %493 = multiply(%490, %492) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %494 = divide(%493, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %495 = nn.conv2d(%494, meta[relay.Constant][333] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %496 = nn.batch_norm(%495, meta[relay.Constant][334] /* ty=Tensor[(96), float32] */, meta[relay.Constant][335] /* ty=Tensor[(96), float32] */, meta[relay.Constant][336] /* ty=Tensor[(96), float32] */, meta[relay.Constant][337] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %497 = %496.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %498 = add(%497, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %499 = clip(%498, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %500 = multiply(%497, %499) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %501 = divide(%500, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %502 = nn.global_avg_pool2d(%501) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %503 = nn.conv2d(%502, meta[relay.Constant][338] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %504 = nn.bias_add(%503, meta[relay.Constant][339] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %505 = sigmoid(%504) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %506 = multiply(%501, %505) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %507 = nn.conv2d(%506, meta[relay.Constant][340] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %508 = nn.batch_norm(%507, meta[relay.Constant][341] /* ty=Tensor[(96), float32] */, meta[relay.Constant][342] /* ty=Tensor[(96), float32] */, meta[relay.Constant][343] /* ty=Tensor[(96), float32] */, meta[relay.Constant][344] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 10, 10), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %509 = %508.0 /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %510 = add(%509, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %511 = clip(%510, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %512 = multiply(%509, %511) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %513 = divide(%512, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 10, 10), float32] */;
  %514 = nn.conv2d(%513, meta[relay.Constant][345] /* ty=Tensor[(32, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 10, 10), float32] */;
  %515 = nn.bias_add(%514, meta[relay.Constant][346] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 10, 10), float32] */;
  %516 = transpose(%515, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 10, 10, 32), float32] */;
  %517 = reshape(%516, newshape=[-1, 8]) /* ty=Tensor[(400, 8), float32] */;
  %518 = nn.softmax(%517, axis=1) /* ty=Tensor[(400, 8), float32] */;
  %519 = nn.matmul(%518, meta[relay.Constant][347] /* ty=Tensor[(8, 1), float32] */, units=None) /* ty=Tensor[(400, 1), float32] */;
  %520 = squeeze(%519, axis=[-1]) /* ty=Tensor[(400), float32] */;
  %521 = nn.conv2d(%215, meta[relay.Constant][348] /* ty=Tensor[(96, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %522 = nn.batch_norm(%521, meta[relay.Constant][349] /* ty=Tensor[(96), float32] */, meta[relay.Constant][350] /* ty=Tensor[(96), float32] */, meta[relay.Constant][351] /* ty=Tensor[(96), float32] */, meta[relay.Constant][352] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %523 = %522.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %524 = add(%523, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %525 = clip(%524, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %526 = multiply(%523, %525) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %527 = divide(%526, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %528 = nn.conv2d(%527, meta[relay.Constant][353] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %529 = nn.batch_norm(%528, meta[relay.Constant][354] /* ty=Tensor[(96), float32] */, meta[relay.Constant][355] /* ty=Tensor[(96), float32] */, meta[relay.Constant][356] /* ty=Tensor[(96), float32] */, meta[relay.Constant][357] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %530 = %529.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %531 = add(%530, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %532 = clip(%531, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %533 = multiply(%530, %532) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %534 = nn.conv2d(%473, meta[relay.Constant][358] /* ty=Tensor[(96, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %535 = nn.batch_norm(%534, meta[relay.Constant][359] /* ty=Tensor[(96), float32] */, meta[relay.Constant][360] /* ty=Tensor[(96), float32] */, meta[relay.Constant][361] /* ty=Tensor[(96), float32] */, meta[relay.Constant][362] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %536 = %535.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %537 = add(%536, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %538 = clip(%537, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %539 = multiply(%536, %538) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %540 = divide(%539, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %541 = nn.conv2d(%540, meta[relay.Constant][363] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %542 = nn.batch_norm(%541, meta[relay.Constant][364] /* ty=Tensor[(96), float32] */, meta[relay.Constant][365] /* ty=Tensor[(96), float32] */, meta[relay.Constant][366] /* ty=Tensor[(96), float32] */, meta[relay.Constant][367] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %543 = %542.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %544 = add(%543, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %545 = clip(%544, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %546 = multiply(%543, %545) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %547 = divide(%533, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %548 = divide(%546, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %549 = add(%547, %548) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %550 = nn.conv2d(%549, meta[relay.Constant][368] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %551 = nn.batch_norm(%550, meta[relay.Constant][369] /* ty=Tensor[(96), float32] */, meta[relay.Constant][370] /* ty=Tensor[(96), float32] */, meta[relay.Constant][371] /* ty=Tensor[(96), float32] */, meta[relay.Constant][372] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %552 = %551.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %553 = add(%552, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %554 = clip(%553, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %555 = multiply(%552, %554) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %556 = divide(%555, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %557 = nn.conv2d(%556, meta[relay.Constant][373] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %558 = nn.batch_norm(%557, meta[relay.Constant][374] /* ty=Tensor[(96), float32] */, meta[relay.Constant][375] /* ty=Tensor[(96), float32] */, meta[relay.Constant][376] /* ty=Tensor[(96), float32] */, meta[relay.Constant][377] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %559 = %558.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %560 = add(%559, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %561 = clip(%560, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %562 = multiply(%559, %561) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %563 = divide(%562, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %564 = nn.conv2d(%563, meta[relay.Constant][378] /* ty=Tensor[(96, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=96, channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %565 = nn.batch_norm(%564, meta[relay.Constant][379] /* ty=Tensor[(96), float32] */, meta[relay.Constant][380] /* ty=Tensor[(96), float32] */, meta[relay.Constant][381] /* ty=Tensor[(96), float32] */, meta[relay.Constant][382] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %566 = %565.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %567 = add(%566, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %568 = clip(%567, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %569 = multiply(%566, %568) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %570 = divide(%569, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %571 = nn.conv2d(%570, meta[relay.Constant][383] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %572 = nn.batch_norm(%571, meta[relay.Constant][384] /* ty=Tensor[(96), float32] */, meta[relay.Constant][385] /* ty=Tensor[(96), float32] */, meta[relay.Constant][386] /* ty=Tensor[(96), float32] */, meta[relay.Constant][387] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %573 = %572.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %574 = add(%573, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %575 = clip(%574, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %576 = multiply(%573, %575) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %577 = divide(%576, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %578 = nn.global_avg_pool2d(%577) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %579 = nn.conv2d(%578, meta[relay.Constant][388] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %580 = nn.bias_add(%579, meta[relay.Constant][389] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %581 = sigmoid(%580) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %582 = multiply(%577, %581) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %583 = nn.conv2d(%582, meta[relay.Constant][390] /* ty=Tensor[(96, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %584 = nn.batch_norm(%583, meta[relay.Constant][391] /* ty=Tensor[(96), float32] */, meta[relay.Constant][392] /* ty=Tensor[(96), float32] */, meta[relay.Constant][393] /* ty=Tensor[(96), float32] */, meta[relay.Constant][394] /* ty=Tensor[(96), float32] */) /* ty=(Tensor[(1, 96, 5, 5), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %585 = %584.0 /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %586 = add(%585, 3f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %587 = clip(%586, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %588 = multiply(%585, %587) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %589 = divide(%588, 6f /* ty=float32 */) /* ty=Tensor[(1, 96, 5, 5), float32] */;
  %590 = nn.conv2d(%589, meta[relay.Constant][395] /* ty=Tensor[(32, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 5, 5), float32] */;
  %591 = nn.bias_add(%590, meta[relay.Constant][396] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 5, 5), float32] */;
  %592 = transpose(%591, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 5, 5, 32), float32] */;
  %593 = reshape(%592, newshape=[-1, 8]) /* ty=Tensor[(100, 8), float32] */;
  %594 = nn.softmax(%593, axis=1) /* ty=Tensor[(100, 8), float32] */;
  %595 = nn.matmul(%594, meta[relay.Constant][397] /* ty=Tensor[(8, 1), float32] */, units=None) /* ty=Tensor[(100, 1), float32] */;
  %596 = squeeze(%595, axis=[-1]) /* ty=Tensor[(100), float32] */;
  %597 = reshape(%338, newshape=[-1, 1600, 4]) /* ty=Tensor[(1, 1600, 4), float32] */;
  %598 = reshape(%429, newshape=[-1, 400, 4]) /* ty=Tensor[(1, 400, 4), float32] */;
  %599 = reshape(%520, newshape=[-1, 100, 4]) /* ty=Tensor[(1, 100, 4), float32] */;
  %600 = reshape(%596, newshape=[-1, 25, 4]) /* ty=Tensor[(1, 25, 4), float32] */;
  %601 = (%597, %598, %599, %600) /* ty=(Tensor[(1, 1600, 4), float32], Tensor[(1, 400, 4), float32], Tensor[(1, 100, 4), float32], Tensor[(1, 25, 4), float32]) */;
  %602 = concatenate(%601, axis=1) /* ty=Tensor[(1, 2125, 4), float32] */;
  %603 = split(%602, indices_or_sections=2, axis=2) /* ty=(Tensor[(1, 2125, 2), float32], Tensor[(1, 2125, 2), float32]) */;
  %604 = %603.0 /* ty=Tensor[(1, 2125, 2), float32] */;
  %605 = multiply(%604, -1f /* ty=float32 */) /* ty=Tensor[(1, 2125, 2), float32] */;
  %606 = %603.1 /* ty=Tensor[(1, 2125, 2), float32] */;
  %607 = add(%605, meta[relay.Constant][398] /* ty=Tensor[(2125, 2), float32] */) /* ty=Tensor[(1, 2125, 2), float32] */;
  %608 = add(%606, meta[relay.Constant][398] /* ty=Tensor[(2125, 2), float32] */) /* ty=Tensor[(1, 2125, 2), float32] */;
  %609 = (%607, %608) /* ty=(Tensor[(1, 2125, 2), float32], Tensor[(1, 2125, 2), float32]) */;
  %610 = concatenate(%609, axis=2) /* ty=Tensor[(1, 2125, 4), float32] */;
  %611 = nn.conv2d(%331, meta[relay.Constant][400] /* ty=Tensor[(80, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %612 = nn.bias_add(%611, meta[relay.Constant][401] /* ty=Tensor[(80), float32] */) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %613 = nn.conv2d(%319, meta[relay.Constant][402] /* ty=Tensor[(1, 96, 5, 5), float32] */, padding=[2, 2, 2, 2], channels=1, kernel_size=[5, 5]) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %614 = nn.batch_norm(%613, meta[relay.Constant][403] /* ty=Tensor[(1), float32] */, meta[relay.Constant][404] /* ty=Tensor[(1), float32] */, meta[relay.Constant][405] /* ty=Tensor[(1), float32] */, meta[relay.Constant][406] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 40, 40), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %615 = %614.0 /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %616 = add(%615, 3f /* ty=float32 */) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %617 = clip(%616, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %618 = multiply(%615, %617) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %619 = divide(%618, 6f /* ty=float32 */) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %620 = nn.conv2d(%619, meta[relay.Constant][407] /* ty=Tensor[(1, 1, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %621 = nn.batch_norm(%620, meta[relay.Constant][408] /* ty=Tensor[(1), float32] */, meta[relay.Constant][409] /* ty=Tensor[(1), float32] */, meta[relay.Constant][410] /* ty=Tensor[(1), float32] */, meta[relay.Constant][411] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 40, 40), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %622 = %621.0 /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %623 = sigmoid(%612) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %624 = sigmoid(%622) /* ty=Tensor[(1, 1, 40, 40), float32] */;
  %625 = multiply(%623, %624) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %626 = sqrt(%625) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %627 = nn.conv2d(%422, meta[relay.Constant][412] /* ty=Tensor[(80, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %628 = nn.bias_add(%627, meta[relay.Constant][413] /* ty=Tensor[(80), float32] */) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %629 = nn.conv2d(%410, meta[relay.Constant][414] /* ty=Tensor[(1, 96, 5, 5), float32] */, padding=[2, 2, 2, 2], channels=1, kernel_size=[5, 5]) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %630 = nn.batch_norm(%629, meta[relay.Constant][415] /* ty=Tensor[(1), float32] */, meta[relay.Constant][416] /* ty=Tensor[(1), float32] */, meta[relay.Constant][417] /* ty=Tensor[(1), float32] */, meta[relay.Constant][418] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 20, 20), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %631 = %630.0 /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %632 = add(%631, 3f /* ty=float32 */) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %633 = clip(%632, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %634 = multiply(%631, %633) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %635 = divide(%634, 6f /* ty=float32 */) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %636 = nn.conv2d(%635, meta[relay.Constant][419] /* ty=Tensor[(1, 1, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %637 = nn.batch_norm(%636, meta[relay.Constant][420] /* ty=Tensor[(1), float32] */, meta[relay.Constant][421] /* ty=Tensor[(1), float32] */, meta[relay.Constant][422] /* ty=Tensor[(1), float32] */, meta[relay.Constant][423] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 20, 20), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %638 = %637.0 /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %639 = sigmoid(%628) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %640 = sigmoid(%638) /* ty=Tensor[(1, 1, 20, 20), float32] */;
  %641 = multiply(%639, %640) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %642 = sqrt(%641) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %643 = nn.conv2d(%513, meta[relay.Constant][424] /* ty=Tensor[(80, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 10, 10), float32] */;
  %644 = nn.bias_add(%643, meta[relay.Constant][425] /* ty=Tensor[(80), float32] */) /* ty=Tensor[(1, 80, 10, 10), float32] */;
  %645 = nn.conv2d(%501, meta[relay.Constant][426] /* ty=Tensor[(1, 96, 5, 5), float32] */, padding=[2, 2, 2, 2], channels=1, kernel_size=[5, 5]) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %646 = nn.batch_norm(%645, meta[relay.Constant][427] /* ty=Tensor[(1), float32] */, meta[relay.Constant][428] /* ty=Tensor[(1), float32] */, meta[relay.Constant][429] /* ty=Tensor[(1), float32] */, meta[relay.Constant][430] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 10, 10), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %647 = %646.0 /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %648 = add(%647, 3f /* ty=float32 */) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %649 = clip(%648, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %650 = multiply(%647, %649) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %651 = divide(%650, 6f /* ty=float32 */) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %652 = nn.conv2d(%651, meta[relay.Constant][431] /* ty=Tensor[(1, 1, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %653 = nn.batch_norm(%652, meta[relay.Constant][432] /* ty=Tensor[(1), float32] */, meta[relay.Constant][433] /* ty=Tensor[(1), float32] */, meta[relay.Constant][434] /* ty=Tensor[(1), float32] */, meta[relay.Constant][435] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 10, 10), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %654 = %653.0 /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %655 = sigmoid(%644) /* ty=Tensor[(1, 80, 10, 10), float32] */;
  %656 = sigmoid(%654) /* ty=Tensor[(1, 1, 10, 10), float32] */;
  %657 = multiply(%655, %656) /* ty=Tensor[(1, 80, 10, 10), float32] */;
  %658 = sqrt(%657) /* ty=Tensor[(1, 80, 10, 10), float32] */;
  %659 = nn.conv2d(%589, meta[relay.Constant][436] /* ty=Tensor[(80, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 5, 5), float32] */;
  %660 = nn.bias_add(%659, meta[relay.Constant][437] /* ty=Tensor[(80), float32] */) /* ty=Tensor[(1, 80, 5, 5), float32] */;
  %661 = nn.conv2d(%577, meta[relay.Constant][438] /* ty=Tensor[(1, 96, 5, 5), float32] */, padding=[2, 2, 2, 2], channels=1, kernel_size=[5, 5]) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %662 = nn.batch_norm(%661, meta[relay.Constant][439] /* ty=Tensor[(1), float32] */, meta[relay.Constant][440] /* ty=Tensor[(1), float32] */, meta[relay.Constant][441] /* ty=Tensor[(1), float32] */, meta[relay.Constant][442] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 5, 5), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %663 = %662.0 /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %664 = add(%663, 3f /* ty=float32 */) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %665 = clip(%664, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %666 = multiply(%663, %665) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %667 = divide(%666, 6f /* ty=float32 */) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %668 = nn.conv2d(%667, meta[relay.Constant][443] /* ty=Tensor[(1, 1, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1, kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %669 = nn.batch_norm(%668, meta[relay.Constant][444] /* ty=Tensor[(1), float32] */, meta[relay.Constant][445] /* ty=Tensor[(1), float32] */, meta[relay.Constant][446] /* ty=Tensor[(1), float32] */, meta[relay.Constant][447] /* ty=Tensor[(1), float32] */) /* ty=(Tensor[(1, 1, 5, 5), float32], Tensor[(1), float32], Tensor[(1), float32]) */;
  %670 = %669.0 /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %671 = sigmoid(%660) /* ty=Tensor[(1, 80, 5, 5), float32] */;
  %672 = sigmoid(%670) /* ty=Tensor[(1, 1, 5, 5), float32] */;
  %673 = multiply(%671, %672) /* ty=Tensor[(1, 80, 5, 5), float32] */;
  %674 = sqrt(%673) /* ty=Tensor[(1, 80, 5, 5), float32] */;
  %675 = reshape(%626, newshape=[-1, 80, 1600]) /* ty=Tensor[(1, 80, 1600), float32] */;
  %676 = reshape(%642, newshape=[-1, 80, 400]) /* ty=Tensor[(1, 80, 400), float32] */;
  %677 = reshape(%658, newshape=[-1, 80, 100]) /* ty=Tensor[(1, 80, 100), float32] */;
  %678 = reshape(%674, newshape=[-1, 80, 25]) /* ty=Tensor[(1, 80, 25), float32] */;
  %679 = (%675, %676, %677, %678) /* ty=(Tensor[(1, 80, 1600), float32], Tensor[(1, 80, 400), float32], Tensor[(1, 80, 100), float32], Tensor[(1, 80, 25), float32]) */;
  %680 = multiply(%610, meta[relay.Constant][399] /* ty=Tensor[(2125, 1), float32] */) /* ty=Tensor[(1, 2125, 4), float32] */;
  %681 = concatenate(%679, axis=2) /* ty=Tensor[(1, 80, 2125), float32] */;
  (%680, %681) /* ty=(Tensor[(1, 2125, 4), float32], Tensor[(1, 80, 2125), float32]) */
}

