<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [/home/ubuntu/Paddle-examples-for-AVH/object_detection/out/object_detection/PicodetM55/object_detection.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image /home/ubuntu/Paddle-examples-for-AVH/object_detection/out/object_detection/PicodetM55/object_detection.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Thu Dec 21 15:50:24 2023
<BR><P>
<H3>Maximum Stack Usage =       1204 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; tvmgen_det_run &rArr; tvmgen_det___tvm_main__ &rArr; tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[74]">ARM_USART_GetCapabilities</a> from Driver_USART.o(.text.ARM_USART_GetCapabilities) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[73]">ARM_USART_GetVersion</a> from Driver_USART.o(.text.ARM_USART_GetVersion) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[14]">BRIDGE_ERROR_Handler</a> from startup_SSE300MPS3.o(.text.BRIDGE_ERROR_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_SSE300MPS3.o(.text.BusFault_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1a]">CPU0_CTI_0_Handler</a> from startup_SSE300MPS3.o(.text.CPU0_CTI_0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1b]">CPU0_CTI_1_Handler</a> from startup_SSE300MPS3.o(.text.CPU0_CTI_1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[17]">CPU0_PPU_Handler</a> from startup_SSE300MPS3.o(.text.CPU0_PPU_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[18]">DEBUG_PPU_Handler</a> from startup_SSE300MPS3.o(.text.DEBUG_PPU_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_SSE300MPS3.o(.text.DebugMon_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[7d]">Driver_USART0_Control</a> from Driver_USART.o(.text.Driver_USART0_Control) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[80]">Driver_USART0_GetModemStatus</a> from Driver_USART.o(.text.Driver_USART0_GetModemStatus) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[7c]">Driver_USART0_GetRxCount</a> from Driver_USART.o(.text.Driver_USART0_GetRxCount) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[7e]">Driver_USART0_GetStatus</a> from Driver_USART.o(.text.Driver_USART0_GetStatus) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[7b]">Driver_USART0_GetTxCount</a> from Driver_USART.o(.text.Driver_USART0_GetTxCount) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[75]">Driver_USART0_Initialize</a> from Driver_USART.o(.text.Driver_USART0_Initialize) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[77]">Driver_USART0_PowerControl</a> from Driver_USART.o(.text.Driver_USART0_PowerControl) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[79]">Driver_USART0_Receive</a> from Driver_USART.o(.text.Driver_USART0_Receive) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[78]">Driver_USART0_Send</a> from Driver_USART.o(.text.Driver_USART0_Send) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[7f]">Driver_USART0_SetModemControl</a> from Driver_USART.o(.text.Driver_USART0_SetModemControl) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[7a]">Driver_USART0_Transfer</a> from Driver_USART.o(.text.Driver_USART0_Transfer) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[76]">Driver_USART0_Uninitialize</a> from Driver_USART.o(.text.Driver_USART0_Uninitialize) referenced from Driver_USART.o(.rodata.Driver_USART0)
 <LI><a href="#[2d]">ETHERNET_Handler</a> from startup_SSE300MPS3.o(.text.ETHERNET_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[34]">ETHOS_U55_Handler</a> from startup_SSE300MPS3.o(.text.ETHOS_U55_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[39]">GPIO0_0_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[43]">GPIO0_10_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_10_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[44]">GPIO0_11_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_11_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[45]">GPIO0_12_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_12_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[46]">GPIO0_13_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_13_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[47]">GPIO0_14_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_14_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[48]">GPIO0_15_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_15_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3a]">GPIO0_1_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3b]">GPIO0_2_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3c]">GPIO0_3_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3d]">GPIO0_4_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_4_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3e]">GPIO0_5_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3f]">GPIO0_6_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_6_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[40]">GPIO0_7_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_7_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[41]">GPIO0_8_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_8_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[42]">GPIO0_9_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_9_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[35]">GPIO0_Combined_Handler</a> from startup_SSE300MPS3.o(.text.GPIO0_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[49]">GPIO1_0_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[53]">GPIO1_10_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_10_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[54]">GPIO1_11_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_11_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[55]">GPIO1_12_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_12_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[56]">GPIO1_13_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_13_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[57]">GPIO1_14_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_14_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[58]">GPIO1_15_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_15_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4a]">GPIO1_1_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4b]">GPIO1_2_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4c]">GPIO1_3_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4d]">GPIO1_4_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_4_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4e]">GPIO1_5_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[4f]">GPIO1_6_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_6_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[50]">GPIO1_7_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_7_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[51]">GPIO1_8_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_8_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[52]">GPIO1_9_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_9_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[36]">GPIO1_Combined_Handler</a> from startup_SSE300MPS3.o(.text.GPIO1_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[59]">GPIO2_0_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[63]">GPIO2_10_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_10_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[64]">GPIO2_11_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_11_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[65]">GPIO2_12_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_12_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[66]">GPIO2_13_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_13_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[67]">GPIO2_14_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_14_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[68]">GPIO2_15_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_15_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5a]">GPIO2_1_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5b]">GPIO2_2_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5c]">GPIO2_3_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5d]">GPIO2_4_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_4_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5e]">GPIO2_5_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5f]">GPIO2_6_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_6_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[60]">GPIO2_7_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_7_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[61]">GPIO2_8_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_8_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[62]">GPIO2_9_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_9_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[37]">GPIO2_Combined_Handler</a> from startup_SSE300MPS3.o(.text.GPIO2_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[69]">GPIO3_0_Handler</a> from startup_SSE300MPS3.o(.text.GPIO3_0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6a]">GPIO3_1_Handler</a> from startup_SSE300MPS3.o(.text.GPIO3_1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6b]">GPIO3_2_Handler</a> from startup_SSE300MPS3.o(.text.GPIO3_2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6c]">GPIO3_3_Handler</a> from startup_SSE300MPS3.o(.text.GPIO3_3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[38]">GPIO3_Combined_Handler</a> from startup_SSE300MPS3.o(.text.GPIO3_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_SSE300MPS3.o(.text.HardFault_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2e]">I2S_Handler</a> from startup_SSE300MPS3.o(.text.I2S_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[15]">MGMT_PPU_Handler</a> from startup_SSE300MPS3.o(.text.MGMT_PPU_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[11]">MPC_Handler</a> from startup_SSE300MPS3.o(.text.MPC_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[13]">MSC_Handler</a> from startup_SSE300MPS3.o(.text.MSC_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_SSE300MPS3.o(.text.MemManage_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_SSE300MPS3.o(.text.NMI_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[c]">NONSEC_WATCHDOG_Handler</a> from startup_SSE300MPS3.o(.text.NONSEC_WATCHDOG_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[b]">NONSEC_WATCHDOG_RESET_REQ_Handler</a> from startup_SSE300MPS3.o(.text.NONSEC_WATCHDOG_RESET_REQ_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[12]">PPC_Handler</a> from startup_SSE300MPS3.o(.text.PPC_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_SSE300MPS3.o(.text.PendSV_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_SSE300MPS3.o(.text.Reset_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[d]">SLOWCLK_Timer_Handler</a> from startup_SSE300MPS3.o(.text.SLOWCLK_Timer_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[31]">SPI_ADC_Handler</a> from startup_SSE300MPS3.o(.text.SPI_ADC_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[32]">SPI_SHIELD0_Handler</a> from startup_SSE300MPS3.o(.text.SPI_SHIELD0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[33]">SPI_SHIELD1_Handler</a> from startup_SSE300MPS3.o(.text.SPI_SHIELD1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_SSE300MPS3.o(.text.SVC_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[16]">SYS_PPU_Handler</a> from startup_SSE300MPS3.o(.text.SYS_PPU_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_SSE300MPS3.o(.text.SecureFault_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_SSE300MPS3.o(.text.SysTick_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1c]">System_Timestamp_Counter_Handler</a> from startup_SSE300MPS3.o(.text.System_Timestamp_Counter_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[e]">TFM_TIMER0_IRQ_Handler</a> from startup_SSE300MPS3.o(.text.TFM_TIMER0_IRQ_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[f]">TIMER1_Handler</a> from startup_SSE300MPS3.o(.text.TIMER1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[10]">TIMER2_Handler</a> from startup_SSE300MPS3.o(.text.TIMER2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[19]">TIMER3_AON_Handler</a> from startup_SSE300MPS3.o(.text.TIMER3_AON_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2f]">TOUCH_SCREEN_Handler</a> from startup_SSE300MPS3.o(.text.TOUCH_SCREEN_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[27]">UART0_Combined_Handler</a> from startup_SSE300MPS3.o(.text.UART0_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[28]">UART1_Combined_Handler</a> from startup_SSE300MPS3.o(.text.UART1_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[29]">UART2_Combined_Handler</a> from startup_SSE300MPS3.o(.text.UART2_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2a]">UART3_Combined_Handler</a> from startup_SSE300MPS3.o(.text.UART3_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2b]">UART4_Combined_Handler</a> from startup_SSE300MPS3.o(.text.UART4_Combined_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6f]">UART5_Handler</a> from startup_SSE300MPS3.o(.text.UART5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[2c]">UARTOVF_Handler</a> from startup_SSE300MPS3.o(.text.UARTOVF_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1d]">UARTRX0_Handler</a> from Driver_USART.o(.text.UARTRX0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1f]">UARTRX1_Handler</a> from Driver_USART.o(.text.UARTRX1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[21]">UARTRX2_Handler</a> from startup_SSE300MPS3.o(.text.UARTRX2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[23]">UARTRX3_Handler</a> from startup_SSE300MPS3.o(.text.UARTRX3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[25]">UARTRX4_Handler</a> from startup_SSE300MPS3.o(.text.UARTRX4_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6d]">UARTRX5_Handler</a> from startup_SSE300MPS3.o(.text.UARTRX5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[1e]">UARTTX0_Handler</a> from Driver_USART.o(.text.UARTTX0_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[20]">UARTTX1_Handler</a> from Driver_USART.o(.text.UARTTX1_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[22]">UARTTX2_Handler</a> from startup_SSE300MPS3.o(.text.UARTTX2_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[24]">UARTTX3_Handler</a> from startup_SSE300MPS3.o(.text.UARTTX3_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[26]">UARTTX4_Handler</a> from startup_SSE300MPS3.o(.text.UARTTX4_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[6e]">UARTTX5_Handler</a> from startup_SSE300MPS3.o(.text.UARTTX5_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[30]">USB_Handler</a> from startup_SSE300MPS3.o(.text.USB_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_SSE300MPS3.o(.text.UsageFault_Handler) referenced from startup_SSE300MPS3.o(RESET)
 <LI><a href="#[72]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[71]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[70]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[81]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[82]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1b1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[85]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[86]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[d3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[88]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[8a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[90]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[93]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[96]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[98]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[9e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[a0]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[a4]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a6]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1b5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[aa]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1be]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1cd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1d3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[b5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tvmgen_det_run &rArr; tvmgen_det___tvm_main__ &rArr; tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ba]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[be]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[c1]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c3]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[c5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[c6]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[c7]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c8]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[87]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[bf]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[cc]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[99]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[cf]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[95]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[d0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[89]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[d1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b2]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b4]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[ff]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[bd]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1da]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[ce]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[ca]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[e4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e5]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a5]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a7]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[cb]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d7]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[d5]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e8]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d8]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1dc]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[cd]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d6]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1dd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[1df]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[ad]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[1e0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f2]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ab]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[e9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[e2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[dc]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1ad]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e4]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1e5]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fa]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ea]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[f6]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ef]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ee]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[f4]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e6]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[fb]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1e8]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[f3]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[100]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[14]"></a>BRIDGE_ERROR_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.BRIDGE_ERROR_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CPU0_CTI_0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.CPU0_CTI_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CPU0_CTI_1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.CPU0_CTI_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CPU0_PPU_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.CPU0_PPU_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DEBUG_PPU_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.DEBUG_PPU_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ETHERNET_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.ETHERNET_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ETHOS_U55_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.ETHOS_U55_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIO0_0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIO0_10_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIO0_11_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIO0_12_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIO0_13_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO0_14_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO0_15_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIO0_1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO0_2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO0_3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIO0_4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIO0_5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO0_6_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO0_7_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO0_8_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO0_9_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO0_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO0_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO1_0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_10_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_11_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_12_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_13_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_14_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_15_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO1_1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO1_2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO1_3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO1_4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO1_5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO1_6_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO1_7_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO1_8_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_9_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO1_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO1_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO2_0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO2_10_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO2_11_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO2_12_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_13_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_14_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO2_15_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO2_1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO2_2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO2_6_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO2_7_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO2_8_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO2_9_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIO2_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO2_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO3_0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO3_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO3_1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO3_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO3_2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO3_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO3_3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO3_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIO3_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.GPIO3_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.I2S_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MGMT_PPU_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.MGMT_PPU_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MPC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.MPC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MSC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.MSC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NONSEC_WATCHDOG_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.NONSEC_WATCHDOG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NONSEC_WATCHDOG_RESET_REQ_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.NONSEC_WATCHDOG_RESET_REQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PPC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.PPC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, startup_SSE300MPS3.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Reset_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SLOWCLK_Timer_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SLOWCLK_Timer_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI_ADC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SPI_ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI_SHIELD0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SPI_SHIELD0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI_SHIELD1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SPI_SHIELD1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SYS_PPU_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SYS_PPU_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SecureFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>SystemInit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, system_SSE300MPS3.o(.text.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1c]"></a>System_Timestamp_Counter_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.System_Timestamp_Counter_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TFM_TIMER0_IRQ_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.TFM_TIMER0_IRQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.TIMER1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.TIMER2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_AON_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.TIMER3_AON_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TOUCH_SCREEN_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.TOUCH_SCREEN_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART0_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART0_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART1_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART1_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART2_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART2_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART3_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART3_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART4_Combined_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART4_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UART5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UARTOVF_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTOVF_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UARTRX0_Handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, Driver_USART.o(.text.UARTRX0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTRX0_Handler &rArr; uart_cmsdk_read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UARTRX1_Handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, Driver_USART.o(.text.UARTRX1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTRX1_Handler &rArr; uart_cmsdk_read
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UARTRX2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTRX2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UARTRX3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTRX3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UARTRX4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTRX4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UARTRX5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTRX5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UARTTX0_Handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, Driver_USART.o(.text.UARTTX0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTTX0_Handler &rArr; uart_cmsdk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UARTTX1_Handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, Driver_USART.o(.text.UARTTX1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTTX1_Handler &rArr; uart_cmsdk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UARTTX2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTTX2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UARTTX3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTTX3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UARTTX4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTTX4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UARTTX5_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UARTTX5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.USB_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_SSE300MPS3.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_SSE300MPS3.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>_sys_close</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[f8]"></a>_sys_flen</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[f9]"></a>_sys_istty</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[e6]"></a>_sys_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[fc]"></a>_sys_seek</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[fd]"></a>_sys_write</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[b8]"></a>main</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204 + Unknown Stack Size
<LI>Call Chain = main &rArr; tvmgen_det_run &rArr; tvmgen_det___tvm_main__ &rArr; tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_run
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11f]"></a>stdout_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stdout_USART.o(.text.stdout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stdout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>stdout_putchar</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stdout_USART.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[121]"></a>tvmgen_det___tvm_main__</STRONG> (Thumb, 4384 bytes, Stack size 552 bytes, det_lib1.o(.text.tvmgen_det___tvm_main__))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = tvmgen_det___tvm_main__ &rArr; tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_transpose_reshape_3
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_transpose_reshape_2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_transpose_reshape_1
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_transpose_reshape
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_reshape_squeeze_reshape_squeeze_reshape_squeeze_reshape_concatenat_3778f7e529c91271_
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_5
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_3
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_reshape_reshape_reshape_reshape_concatenate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_3
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_matmul_3
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_matmul_2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_matmul_1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_matmul
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d_5
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d_4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d_3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d_2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d_1
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_global_avg_pool2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_7
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_6
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_5
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_3
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_nn_relu_1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_nn_relu
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_add
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_9
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_8
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_76
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_75
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_74
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_73
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_72
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_71
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_70
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_7
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_69
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_68
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_67
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_66
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_65
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_64
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_63
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_62
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_61
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_60
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_6
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_59
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_58
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_57
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_56
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_55
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_54
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_53
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_52
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_51
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_50
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_5
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_49
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_48
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_47
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_46
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_45
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_44
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_43
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_42
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_41
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_40
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_39
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_38
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_37
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_36
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_35
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_34
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_33
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_32
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_31
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_30
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_3
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_29
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_28
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_27
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_26
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_24
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_23
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_22
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_21
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_20
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_19
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_18
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_17
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_16
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_15
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_14
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_13
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_12
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_11
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_10
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip_1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_add_clip
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_3
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_image_resize2d_concatenate_1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_image_resize2d_concatenate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_concatenate_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_concatenate
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_run
</UL>

<P><STRONG><a name="[160]"></a>tvmgen_det_fused_concatenate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, det_lib1.o(.text.tvmgen_det_fused_concatenate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tvmgen_det_fused_concatenate
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[173]"></a>tvmgen_det_fused_concatenate_1</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, det_lib1.o(.text.tvmgen_det_fused_concatenate_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tvmgen_det_fused_concatenate_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[147]"></a>tvmgen_det_fused_image_resize2d_concatenate</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, det_lib1.o(.text.tvmgen_det_fused_image_resize2d_concatenate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tvmgen_det_fused_image_resize2d_concatenate
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14d]"></a>tvmgen_det_fused_image_resize2d_concatenate_1</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, det_lib1.o(.text.tvmgen_det_fused_image_resize2d_concatenate_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tvmgen_det_fused_image_resize2d_concatenate_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15a]"></a>tvmgen_det_fused_nn_conv2d_add</STRONG> (Thumb, 1000 bytes, Stack size 132 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16d]"></a>tvmgen_det_fused_nn_conv2d_add_1</STRONG> (Thumb, 1000 bytes, Stack size 132 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[180]"></a>tvmgen_det_fused_nn_conv2d_add_2</STRONG> (Thumb, 998 bytes, Stack size 132 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[190]"></a>tvmgen_det_fused_nn_conv2d_add_3</STRONG> (Thumb, 572 bytes, Stack size 84 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13c]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip</STRONG> (Thumb, 448 bytes, Stack size 76 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[142]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_1</STRONG> (Thumb, 444 bytes, Stack size 76 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[122]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide</STRONG> (Thumb, 2228 bytes, Stack size 228 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[123]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_1</STRONG> (Thumb, 2044 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12c]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_10</STRONG> (Thumb, 4144 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_10
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12d]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_11</STRONG> (Thumb, 2008 bytes, Stack size 232 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_11
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12e]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_12</STRONG> (Thumb, 2764 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_12
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_13</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_13
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[130]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_14</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_14
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[131]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_15</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_15
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[132]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_16</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_16
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[133]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_17</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_17
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[134]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_18</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_18
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[135]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_19</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_19
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[124]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_2</STRONG> (Thumb, 824 bytes, Stack size 128 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[136]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_20</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_20
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[137]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_21</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_21))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_21
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[138]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_22</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_22
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[139]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_23</STRONG> (Thumb, 3456 bytes, Stack size 372 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_23
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13e]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_24</STRONG> (Thumb, 1352 bytes, Stack size 176 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_24
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25</STRONG> (Thumb, 4752 bytes, Stack size 532 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[144]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_26</STRONG> (Thumb, 1352 bytes, Stack size 176 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_26
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[145]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_27</STRONG> (Thumb, 2740 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_27))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_27
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[146]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_28</STRONG> (Thumb, 2756 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_28
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[148]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_29</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_29))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_29
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[125]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_3</STRONG> (Thumb, 2024 bytes, Stack size 232 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[149]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_30</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_30))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_30
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14a]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_31</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_31
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14b]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_32</STRONG> (Thumb, 2756 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_32
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14c]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_33</STRONG> (Thumb, 4140 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_33))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_33
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14e]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_34</STRONG> (Thumb, 4308 bytes, Stack size 460 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_34))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_34
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[14f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_35</STRONG> (Thumb, 4136 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_35))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_35
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[150]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_36</STRONG> (Thumb, 4308 bytes, Stack size 460 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_36))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_36
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[151]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_37</STRONG> (Thumb, 4132 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_37))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_37
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[152]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_38</STRONG> (Thumb, 4304 bytes, Stack size 460 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_38))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_38
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[153]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_39</STRONG> (Thumb, 4144 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_39))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_39
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[126]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_4</STRONG> (Thumb, 840 bytes, Stack size 128 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[154]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_40</STRONG> (Thumb, 4308 bytes, Stack size 460 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_40))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_40
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[155]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_41</STRONG> (Thumb, 4140 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_41))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_41
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[159]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_42</STRONG> (Thumb, 4128 bytes, Stack size 464 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_42))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_42
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15e]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_43</STRONG> (Thumb, 2012 bytes, Stack size 236 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_43))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_43
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_44</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_44))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_44
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[161]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_45</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_45))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_45
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[162]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_46</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_46))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_46
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[163]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_47</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_47))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_47
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[164]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_48</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_48
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[165]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_49</STRONG> (Thumb, 2020 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_49))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_49
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[127]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_5</STRONG> (Thumb, 2048 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_5
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[166]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_50</STRONG> (Thumb, 2756 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_50))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_50
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[167]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_51</STRONG> (Thumb, 2024 bytes, Stack size 268 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_51))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_51
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[168]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_52</STRONG> (Thumb, 2752 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_52))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_52
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16c]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_53</STRONG> (Thumb, 2744 bytes, Stack size 328 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_53))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_53
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[171]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_54</STRONG> (Thumb, 3444 bytes, Stack size 372 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_54))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_54
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[172]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_55</STRONG> (Thumb, 2732 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_55))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_55
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[174]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_56</STRONG> (Thumb, 3480 bytes, Stack size 452 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_56))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_56
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[175]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_57</STRONG> (Thumb, 2732 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_57))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_57
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[176]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_58</STRONG> (Thumb, 3480 bytes, Stack size 452 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_58))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_58
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[177]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_59</STRONG> (Thumb, 2728 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_59))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_59
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[128]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_6</STRONG> (Thumb, 840 bytes, Stack size 128 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_6
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[178]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_60</STRONG> (Thumb, 3472 bytes, Stack size 452 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_60))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_60
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[179]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_61</STRONG> (Thumb, 2736 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_61))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_61
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17a]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_62</STRONG> (Thumb, 3480 bytes, Stack size 452 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_62))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_62
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17b]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_63</STRONG> (Thumb, 2732 bytes, Stack size 332 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_63))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_63
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_64</STRONG> (Thumb, 2724 bytes, Stack size 328 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_64
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[184]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_65</STRONG> (Thumb, 1752 bytes, Stack size 232 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_65))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_65
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[185]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_66</STRONG> (Thumb, 1756 bytes, Stack size 232 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_66))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_66
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[186]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_67</STRONG> (Thumb, 744 bytes, Stack size 112 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_67))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_67
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[188]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_68</STRONG> (Thumb, 1768 bytes, Stack size 252 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_68))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_68
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[189]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_69</STRONG> (Thumb, 744 bytes, Stack size 112 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_69))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_69
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[129]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_7</STRONG> (Thumb, 2024 bytes, Stack size 232 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_7
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18a]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_70</STRONG> (Thumb, 1768 bytes, Stack size 252 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_70))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_70
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18b]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_71</STRONG> (Thumb, 740 bytes, Stack size 112 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_71))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_71
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18f]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_72</STRONG> (Thumb, 736 bytes, Stack size 108 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_72))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_72
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[195]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_73</STRONG> (Thumb, 6168 bytes, Stack size 444 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_73))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_73
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[198]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_74</STRONG> (Thumb, 6168 bytes, Stack size 444 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_74))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_74
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19b]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_75</STRONG> (Thumb, 6164 bytes, Stack size 444 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_75))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_75
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19e]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_76</STRONG> (Thumb, 1224 bytes, Stack size 140 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_76))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_76
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12a]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_8</STRONG> (Thumb, 4144 bytes, Stack size 468 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_8
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[12b]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_9</STRONG> (Thumb, 4340 bytes, Stack size 460 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_9
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[187]"></a>tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_add</STRONG> (Thumb, 764 bytes, Stack size 116 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_add
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13b]"></a>tvmgen_det_fused_nn_conv2d_add_nn_relu</STRONG> (Thumb, 392 bytes, Stack size 68 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_nn_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_nn_relu
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[141]"></a>tvmgen_det_fused_nn_conv2d_add_nn_relu_1</STRONG> (Thumb, 392 bytes, Stack size 68 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_nn_relu_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_nn_relu_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[157]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16a]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_1</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_1 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17d]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_2</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_2 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18d]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_3</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_3 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[196]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_4</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_4 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[199]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_5</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_5 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19c]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_6</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_6 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19f]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_7</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_7 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[197]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt</STRONG> (Thumb, 1854 bytes, Stack size 200 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19a]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1</STRONG> (Thumb, 1854 bytes, Stack size 200 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[19d]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2</STRONG> (Thumb, 1128 bytes, Stack size 152 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[1a0]"></a>tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3</STRONG> (Thumb, 630 bytes, Stack size 96 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13a]"></a>tvmgen_det_fused_nn_global_avg_pool2d</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[140]"></a>tvmgen_det_fused_nn_global_avg_pool2d_1</STRONG> (Thumb, 216 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[156]"></a>tvmgen_det_fused_nn_global_avg_pool2d_2</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[169]"></a>tvmgen_det_fused_nn_global_avg_pool2d_3</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17c]"></a>tvmgen_det_fused_nn_global_avg_pool2d_4</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d_4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18c]"></a>tvmgen_det_fused_nn_global_avg_pool2d_5</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_global_avg_pool2d_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tvmgen_det_fused_nn_global_avg_pool2d_5
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15d]"></a>tvmgen_det_fused_nn_matmul</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_matmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tvmgen_det_fused_nn_matmul
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[170]"></a>tvmgen_det_fused_nn_matmul_1</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_matmul_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tvmgen_det_fused_nn_matmul_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[183]"></a>tvmgen_det_fused_nn_matmul_2</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_matmul_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tvmgen_det_fused_nn_matmul_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[193]"></a>tvmgen_det_fused_nn_matmul_3</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_matmul_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tvmgen_det_fused_nn_matmul_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15c]"></a>tvmgen_det_fused_nn_softmax</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_softmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_softmax &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16f]"></a>tvmgen_det_fused_nn_softmax_1</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_softmax_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_softmax_1 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[182]"></a>tvmgen_det_fused_nn_softmax_2</STRONG> (Thumb, 366 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_softmax_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_softmax_2 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[192]"></a>tvmgen_det_fused_nn_softmax_3</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, det_lib1.o(.text.tvmgen_det_fused_nn_softmax_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tvmgen_det_fused_nn_softmax_3 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[1a1]"></a>tvmgen_det_fused_reshape_reshape_reshape_reshape_concatenate</STRONG> (Thumb, 504 bytes, Stack size 68 bytes, det_lib1.o(.text.tvmgen_det_fused_reshape_reshape_reshape_reshape_concatenate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tvmgen_det_fused_reshape_reshape_reshape_reshape_concatenate
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[13d]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[143]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_1</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[158]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_2</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16b]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_3</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[17e]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_4</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[18e]"></a>tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_5</STRONG> (Thumb, 222 bytes, Stack size 44 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tvmgen_det_fused_squeeze_expand_dims_multiply_layout_transform_5
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[194]"></a>tvmgen_det_fused_squeeze_reshape_squeeze_reshape_squeeze_reshape_squeeze_reshape_concatenat_3778f7e529c91271_</STRONG> (Thumb, 1162 bytes, Stack size 168 bytes, det_lib1.o(.text.tvmgen_det_fused_squeeze_reshape_squeeze_reshape_squeeze_reshape_squeeze_reshape_concatenat_3778f7e529c91271_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tvmgen_det_fused_squeeze_reshape_squeeze_reshape_squeeze_reshape_squeeze_reshape_concatenat_3778f7e529c91271_
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[15b]"></a>tvmgen_det_fused_transpose_reshape</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_transpose_reshape))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_transpose_reshape
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[16e]"></a>tvmgen_det_fused_transpose_reshape_1</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_transpose_reshape_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_transpose_reshape_1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[181]"></a>tvmgen_det_fused_transpose_reshape_2</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_transpose_reshape_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_transpose_reshape_2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[191]"></a>tvmgen_det_fused_transpose_reshape_3</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, det_lib1.o(.text.tvmgen_det_fused_transpose_reshape_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tvmgen_det_fused_transpose_reshape_3
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>

<P><STRONG><a name="[120]"></a>tvmgen_det_run</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, det_lib0.o(.text.tvmgen_det_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = tvmgen_det_run &rArr; tvmgen_det___tvm_main__ &rArr; tvmgen_det_fused_nn_conv2d_add_add_clip_multiply_divide_25
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det___tvm_main__
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>uart_cmsdk_clear_interrupt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_cmsdk_clear_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX1_Handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX1_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX0_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX0_Handler
</UL>

<P><STRONG><a name="[10b]"></a>uart_cmsdk_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_cmsdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[108]"></a>uart_cmsdk_irq_rx_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_irq_rx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_cmsdk_irq_rx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[10e]"></a>uart_cmsdk_irq_rx_enable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_irq_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_cmsdk_irq_rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[109]"></a>uart_cmsdk_irq_tx_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_irq_tx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_cmsdk_irq_tx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[10f]"></a>uart_cmsdk_irq_tx_enable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_irq_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_cmsdk_irq_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[112]"></a>uart_cmsdk_read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_cmsdk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX1_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX0_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Receive
</UL>

<P><STRONG><a name="[104]"></a>uart_cmsdk_rx_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_rx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_cmsdk_rx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[105]"></a>uart_cmsdk_rx_enable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_cmsdk_rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
</UL>

<P><STRONG><a name="[111]"></a>uart_cmsdk_rx_ready</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_rx_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_cmsdk_rx_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Receive
</UL>

<P><STRONG><a name="[106]"></a>uart_cmsdk_set_baudrate</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_cmsdk_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
</UL>

<P><STRONG><a name="[102]"></a>uart_cmsdk_tx_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_tx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_cmsdk_tx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[103]"></a>uart_cmsdk_tx_enable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_cmsdk_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
</UL>

<P><STRONG><a name="[114]"></a>uart_cmsdk_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart_cmsdk_drv.o(.text.uart_cmsdk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_cmsdk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX1_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX0_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Send
</UL>

<P><STRONG><a name="[dd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1a4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1a6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a7]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[de]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[df]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1a8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1ac]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1a2]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_3
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_2
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_softmax
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_7
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_6
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_5
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_3
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid
</UL>

<P><STRONG><a name="[1e9]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[1a3]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_3
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_2
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt_1
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tvmgen_det_fused_nn_conv2d_add_sigmoid_multiply_sqrt
</UL>

<P><STRONG><a name="[1aa]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1ab]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1a9]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[d2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[70]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[72]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>_fp_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpinit_81m.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ea]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1eb]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[8b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8f]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>ARM_USART_GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, Driver_USART.o(.text.ARM_USART_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_USART_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[74]"></a>ARM_USART_GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, Driver_USART.o(.text.ARM_USART_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[75]"></a>Driver_USART0_Initialize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Driver_USART0_Initialize &rArr; ARM_USARTx_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[119]"></a>ARM_USARTx_Initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Driver_USART.o(.text.ARM_USARTx_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_USARTx_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Initialize
</UL>

<P><STRONG><a name="[76]"></a>Driver_USART0_Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Driver_USART.o(.text.Driver_USART0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Driver_USART0_Uninitialize &rArr; ARM_USARTx_Uninitialize &rArr; ARM_USARTx_PowerControl &rArr; uart_cmsdk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[115]"></a>ARM_USARTx_Uninitialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, Driver_USART.o(.text.ARM_USARTx_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ARM_USARTx_Uninitialize &rArr; ARM_USARTx_PowerControl &rArr; uart_cmsdk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Uninitialize
</UL>

<P><STRONG><a name="[77]"></a>Driver_USART0_PowerControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Driver_USART0_PowerControl &rArr; ARM_USARTx_PowerControl &rArr; uart_cmsdk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[107]"></a>ARM_USARTx_PowerControl</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, Driver_USART.o(.text.ARM_USARTx_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ARM_USARTx_PowerControl &rArr; uart_cmsdk_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_irq_tx_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_irq_rx_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_tx_disable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_rx_disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_irq_tx_disable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_irq_rx_disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_PowerControl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Uninitialize
</UL>

<P><STRONG><a name="[78]"></a>Driver_USART0_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Driver_USART0_Send &rArr; ARM_USARTx_Send &rArr; uart_cmsdk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[113]"></a>ARM_USARTx_Send</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, Driver_USART.o(.text.ARM_USARTx_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ARM_USARTx_Send &rArr; uart_cmsdk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Send
</UL>

<P><STRONG><a name="[79]"></a>Driver_USART0_Receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Driver_USART0_Receive &rArr; ARM_USARTx_Receive &rArr; uart_cmsdk_read
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[110]"></a>ARM_USARTx_Receive</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, Driver_USART.o(.text.ARM_USARTx_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ARM_USARTx_Receive &rArr; uart_cmsdk_read
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_rx_ready
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Receive
</UL>

<P><STRONG><a name="[7a]"></a>Driver_USART0_Transfer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, Driver_USART.o(.text.Driver_USART0_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Driver_USART0_Transfer &rArr; ARM_USARTx_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[11a]"></a>ARM_USARTx_Transfer</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, Driver_USART.o(.text.ARM_USARTx_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ARM_USARTx_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Transfer
</UL>

<P><STRONG><a name="[7b]"></a>Driver_USART0_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Driver_USART.o(.text.Driver_USART0_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Driver_USART0_GetTxCount &rArr; ARM_USARTx_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[118]"></a>ARM_USARTx_GetTxCount</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, Driver_USART.o(.text.ARM_USARTx_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_USARTx_GetTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_GetTxCount
</UL>

<P><STRONG><a name="[7c]"></a>Driver_USART0_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Driver_USART.o(.text.Driver_USART0_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Driver_USART0_GetRxCount &rArr; ARM_USARTx_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[116]"></a>ARM_USARTx_GetRxCount</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, Driver_USART.o(.text.ARM_USARTx_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_USARTx_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_GetRxCount
</UL>

<P><STRONG><a name="[7d]"></a>Driver_USART0_Control</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Driver_USART0_Control &rArr; ARM_USARTx_Control &rArr; uart_cmsdk_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[101]"></a>ARM_USARTx_Control</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, Driver_USART.o(.text.ARM_USARTx_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ARM_USARTx_Control &rArr; uart_cmsdk_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_set_baudrate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_rx_enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_tx_enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_tx_disable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmsdk_rx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_Control
</UL>

<P><STRONG><a name="[7e]"></a>Driver_USART0_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, Driver_USART.o(.text.Driver_USART0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Driver_USART0_GetStatus &rArr; ARM_USARTx_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[117]"></a>ARM_USARTx_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, Driver_USART.o(.text.ARM_USARTx_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_USARTx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_USART0_GetStatus
</UL>

<P><STRONG><a name="[7f]"></a>Driver_USART0_SetModemControl</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, Driver_USART.o(.text.Driver_USART0_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Driver_USART0_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[80]"></a>Driver_USART0_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, Driver_USART.o(.text.Driver_USART0_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Driver_USART0_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Driver_USART.o(.rodata.Driver_USART0)
</UL>
<P><STRONG><a name="[10a]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, Driver_USART.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[10c]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, Driver_USART.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[10d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, Driver_USART.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_USARTx_PowerControl
</UL>

<P><STRONG><a name="[db]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[71]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
