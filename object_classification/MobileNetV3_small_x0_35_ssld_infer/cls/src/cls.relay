def @main(%x: Tensor[(1, 3, 56, 56), float32] /* ty=Tensor[(1, 3, 56, 56), float32] */) -> Tensor[(1, 1000), float32] {
  %0 = nn.conv2d(%x, meta[relay.Constant][0] /* ty=Tensor[(8, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=8, kernel_size=[3, 3]) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %1 = nn.batch_norm(%0, meta[relay.Constant][1] /* ty=Tensor[(8), float32] */, meta[relay.Constant][2] /* ty=Tensor[(8), float32] */, meta[relay.Constant][3] /* ty=Tensor[(8), float32] */, meta[relay.Constant][4] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 28, 28), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %2 = %1.0 /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %3 = add(%2, 3f /* ty=float32 */) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %4 = clip(%3, a_min=0f, a_max=6f) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %5 = multiply(%2, %4) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %6 = divide(%5, 6f /* ty=float32 */) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][5] /* ty=Tensor[(8, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %8 = nn.batch_norm(%7, meta[relay.Constant][6] /* ty=Tensor[(8), float32] */, meta[relay.Constant][7] /* ty=Tensor[(8), float32] */, meta[relay.Constant][8] /* ty=Tensor[(8), float32] */, meta[relay.Constant][9] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 28, 28), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %9 = %8.0 /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %10 = nn.relu(%9) /* ty=Tensor[(1, 8, 28, 28), float32] */;
  %11 = nn.conv2d(%10, meta[relay.Constant][10] /* ty=Tensor[(8, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=8, channels=8, kernel_size=[3, 3]) /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %12 = nn.batch_norm(%11, meta[relay.Constant][11] /* ty=Tensor[(8), float32] */, meta[relay.Constant][12] /* ty=Tensor[(8), float32] */, meta[relay.Constant][13] /* ty=Tensor[(8), float32] */, meta[relay.Constant][14] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 14, 14), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %13 = %12.0 /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %14 = nn.relu(%13) /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %15 = nn.global_avg_pool2d(%14) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %16 = nn.conv2d(%15, meta[relay.Constant][15] /* ty=Tensor[(2, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=2, kernel_size=[1, 1]) /* ty=Tensor[(1, 2, 1, 1), float32] */;
  %17 = nn.bias_add(%16, meta[relay.Constant][16] /* ty=Tensor[(2), float32] */) /* ty=Tensor[(1, 2, 1, 1), float32] */;
  %18 = nn.relu(%17) /* ty=Tensor[(1, 2, 1, 1), float32] */;
  %19 = nn.conv2d(%18, meta[relay.Constant][17] /* ty=Tensor[(8, 2, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %20 = nn.bias_add(%19, meta[relay.Constant][18] /* ty=Tensor[(8), float32] */) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %21 = multiply(%20, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %22 = add(%21, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %23 = clip(%22, a_min=0f, a_max=1f) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %24 = multiply(%14, %23) /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %25 = nn.conv2d(%24, meta[relay.Constant][19] /* ty=Tensor[(8, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %26 = nn.batch_norm(%25, meta[relay.Constant][20] /* ty=Tensor[(8), float32] */, meta[relay.Constant][21] /* ty=Tensor[(8), float32] */, meta[relay.Constant][22] /* ty=Tensor[(8), float32] */, meta[relay.Constant][23] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 14, 14), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %27 = %26.0 /* ty=Tensor[(1, 8, 14, 14), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][24] /* ty=Tensor[(24, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %29 = nn.batch_norm(%28, meta[relay.Constant][25] /* ty=Tensor[(24), float32] */, meta[relay.Constant][26] /* ty=Tensor[(24), float32] */, meta[relay.Constant][27] /* ty=Tensor[(24), float32] */, meta[relay.Constant][28] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 14, 14), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %30 = %29.0 /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %32 = nn.conv2d(%31, meta[relay.Constant][29] /* ty=Tensor[(24, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=24, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 7, 7), float32] */;
  %33 = nn.batch_norm(%32, meta[relay.Constant][30] /* ty=Tensor[(24), float32] */, meta[relay.Constant][31] /* ty=Tensor[(24), float32] */, meta[relay.Constant][32] /* ty=Tensor[(24), float32] */, meta[relay.Constant][33] /* ty=Tensor[(24), float32] */) /* ty=(Tensor[(1, 24, 7, 7), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %34 = %33.0 /* ty=Tensor[(1, 24, 7, 7), float32] */;
  %35 = nn.relu(%34) /* ty=Tensor[(1, 24, 7, 7), float32] */;
  %36 = nn.conv2d(%35, meta[relay.Constant][34] /* ty=Tensor[(8, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 7, 7), float32] */;
  %37 = nn.batch_norm(%36, meta[relay.Constant][35] /* ty=Tensor[(8), float32] */, meta[relay.Constant][36] /* ty=Tensor[(8), float32] */, meta[relay.Constant][37] /* ty=Tensor[(8), float32] */, meta[relay.Constant][38] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 7, 7), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %38 = %37.0 /* ty=Tensor[(1, 8, 7, 7), float32] */;
  %39 = nn.conv2d(%38, meta[relay.Constant][39] /* ty=Tensor[(32, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %40 = nn.batch_norm(%39, meta[relay.Constant][40] /* ty=Tensor[(32), float32] */, meta[relay.Constant][41] /* ty=Tensor[(32), float32] */, meta[relay.Constant][42] /* ty=Tensor[(32), float32] */, meta[relay.Constant][43] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 7, 7), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %41 = %40.0 /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %42 = nn.relu(%41) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %43 = nn.conv2d(%42, meta[relay.Constant][44] /* ty=Tensor[(32, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %44 = nn.batch_norm(%43, meta[relay.Constant][45] /* ty=Tensor[(32), float32] */, meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, meta[relay.Constant][47] /* ty=Tensor[(32), float32] */, meta[relay.Constant][48] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 7, 7), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %45 = %44.0 /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %46 = nn.relu(%45) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %47 = nn.conv2d(%46, meta[relay.Constant][49] /* ty=Tensor[(8, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 7, 7), float32] */;
  %48 = nn.batch_norm(%47, meta[relay.Constant][50] /* ty=Tensor[(8), float32] */, meta[relay.Constant][51] /* ty=Tensor[(8), float32] */, meta[relay.Constant][52] /* ty=Tensor[(8), float32] */, meta[relay.Constant][53] /* ty=Tensor[(8), float32] */) /* ty=(Tensor[(1, 8, 7, 7), float32], Tensor[(8), float32], Tensor[(8), float32]) */;
  %49 = %48.0 /* ty=Tensor[(1, 8, 7, 7), float32] */;
  %50 = add(%38, %49) /* ty=Tensor[(1, 8, 7, 7), float32] */;
  %51 = nn.conv2d(%50, meta[relay.Constant][54] /* ty=Tensor[(32, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %52 = nn.batch_norm(%51, meta[relay.Constant][55] /* ty=Tensor[(32), float32] */, meta[relay.Constant][56] /* ty=Tensor[(32), float32] */, meta[relay.Constant][57] /* ty=Tensor[(32), float32] */, meta[relay.Constant][58] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 7, 7), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %53 = %52.0 /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %54 = add(%53, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %55 = clip(%54, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %56 = multiply(%53, %55) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %57 = divide(%56, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %58 = nn.conv2d(%57, meta[relay.Constant][59] /* ty=Tensor[(32, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=32, channels=32, kernel_size=[5, 5]) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %59 = nn.batch_norm(%58, meta[relay.Constant][60] /* ty=Tensor[(32), float32] */, meta[relay.Constant][61] /* ty=Tensor[(32), float32] */, meta[relay.Constant][62] /* ty=Tensor[(32), float32] */, meta[relay.Constant][63] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 4, 4), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %60 = %59.0 /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %61 = add(%60, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %62 = clip(%61, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %63 = multiply(%60, %62) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %64 = divide(%63, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %65 = nn.global_avg_pool2d(%64) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %66 = nn.conv2d(%65, meta[relay.Constant][64] /* ty=Tensor[(8, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %67 = nn.bias_add(%66, meta[relay.Constant][65] /* ty=Tensor[(8), float32] */) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %68 = nn.relu(%67) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %69 = nn.conv2d(%68, meta[relay.Constant][66] /* ty=Tensor[(32, 8, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %70 = nn.bias_add(%69, meta[relay.Constant][67] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %71 = multiply(%70, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %72 = add(%71, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %73 = clip(%72, a_min=0f, a_max=1f) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %74 = multiply(%64, %73) /* ty=Tensor[(1, 32, 4, 4), float32] */;
  %75 = nn.conv2d(%74, meta[relay.Constant][68] /* ty=Tensor[(16, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %76 = nn.batch_norm(%75, meta[relay.Constant][69] /* ty=Tensor[(16), float32] */, meta[relay.Constant][70] /* ty=Tensor[(16), float32] */, meta[relay.Constant][71] /* ty=Tensor[(16), float32] */, meta[relay.Constant][72] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 4, 4), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %77 = %76.0 /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %78 = nn.conv2d(%77, meta[relay.Constant][73] /* ty=Tensor[(88, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=88, kernel_size=[1, 1]) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %79 = nn.batch_norm(%78, meta[relay.Constant][74] /* ty=Tensor[(88), float32] */, meta[relay.Constant][75] /* ty=Tensor[(88), float32] */, meta[relay.Constant][76] /* ty=Tensor[(88), float32] */, meta[relay.Constant][77] /* ty=Tensor[(88), float32] */) /* ty=(Tensor[(1, 88, 4, 4), float32], Tensor[(88), float32], Tensor[(88), float32]) */;
  %80 = %79.0 /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %81 = add(%80, 3f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %83 = multiply(%80, %82) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %84 = divide(%83, 6f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %85 = nn.conv2d(%84, meta[relay.Constant][78] /* ty=Tensor[(88, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=88, channels=88, kernel_size=[5, 5]) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %86 = nn.batch_norm(%85, meta[relay.Constant][79] /* ty=Tensor[(88), float32] */, meta[relay.Constant][80] /* ty=Tensor[(88), float32] */, meta[relay.Constant][81] /* ty=Tensor[(88), float32] */, meta[relay.Constant][82] /* ty=Tensor[(88), float32] */) /* ty=(Tensor[(1, 88, 4, 4), float32], Tensor[(88), float32], Tensor[(88), float32]) */;
  %87 = %86.0 /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %88 = add(%87, 3f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %89 = clip(%88, a_min=0f, a_max=6f) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %90 = multiply(%87, %89) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %91 = divide(%90, 6f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %92 = nn.global_avg_pool2d(%91) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %93 = nn.conv2d(%92, meta[relay.Constant][83] /* ty=Tensor[(22, 88, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=22, kernel_size=[1, 1]) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %94 = nn.bias_add(%93, meta[relay.Constant][84] /* ty=Tensor[(22), float32] */) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %95 = nn.relu(%94) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %96 = nn.conv2d(%95, meta[relay.Constant][85] /* ty=Tensor[(88, 22, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=88, kernel_size=[1, 1]) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %97 = nn.bias_add(%96, meta[relay.Constant][86] /* ty=Tensor[(88), float32] */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %98 = multiply(%97, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %99 = add(%98, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %100 = clip(%99, a_min=0f, a_max=1f) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %101 = multiply(%91, %100) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %102 = nn.conv2d(%101, meta[relay.Constant][87] /* ty=Tensor[(16, 88, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %103 = nn.batch_norm(%102, meta[relay.Constant][88] /* ty=Tensor[(16), float32] */, meta[relay.Constant][89] /* ty=Tensor[(16), float32] */, meta[relay.Constant][90] /* ty=Tensor[(16), float32] */, meta[relay.Constant][91] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 4, 4), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %104 = %103.0 /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %105 = add(%77, %104) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %106 = nn.conv2d(%105, meta[relay.Constant][92] /* ty=Tensor[(88, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=88, kernel_size=[1, 1]) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %107 = nn.batch_norm(%106, meta[relay.Constant][93] /* ty=Tensor[(88), float32] */, meta[relay.Constant][94] /* ty=Tensor[(88), float32] */, meta[relay.Constant][95] /* ty=Tensor[(88), float32] */, meta[relay.Constant][96] /* ty=Tensor[(88), float32] */) /* ty=(Tensor[(1, 88, 4, 4), float32], Tensor[(88), float32], Tensor[(88), float32]) */;
  %108 = %107.0 /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %109 = add(%108, 3f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %110 = clip(%109, a_min=0f, a_max=6f) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %111 = multiply(%108, %110) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %112 = divide(%111, 6f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %113 = nn.conv2d(%112, meta[relay.Constant][97] /* ty=Tensor[(88, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=88, channels=88, kernel_size=[5, 5]) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %114 = nn.batch_norm(%113, meta[relay.Constant][98] /* ty=Tensor[(88), float32] */, meta[relay.Constant][99] /* ty=Tensor[(88), float32] */, meta[relay.Constant][100] /* ty=Tensor[(88), float32] */, meta[relay.Constant][101] /* ty=Tensor[(88), float32] */) /* ty=(Tensor[(1, 88, 4, 4), float32], Tensor[(88), float32], Tensor[(88), float32]) */;
  %115 = %114.0 /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %116 = add(%115, 3f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %118 = multiply(%115, %117) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %119 = divide(%118, 6f /* ty=float32 */) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %120 = nn.global_avg_pool2d(%119) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %121 = nn.conv2d(%120, meta[relay.Constant][102] /* ty=Tensor[(22, 88, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=22, kernel_size=[1, 1]) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %122 = nn.bias_add(%121, meta[relay.Constant][103] /* ty=Tensor[(22), float32] */) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %123 = nn.relu(%122) /* ty=Tensor[(1, 22, 1, 1), float32] */;
  %124 = nn.conv2d(%123, meta[relay.Constant][104] /* ty=Tensor[(88, 22, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=88, kernel_size=[1, 1]) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %125 = nn.bias_add(%124, meta[relay.Constant][105] /* ty=Tensor[(88), float32] */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %126 = multiply(%125, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %127 = add(%126, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %128 = clip(%127, a_min=0f, a_max=1f) /* ty=Tensor[(1, 88, 1, 1), float32] */;
  %129 = multiply(%119, %128) /* ty=Tensor[(1, 88, 4, 4), float32] */;
  %130 = nn.conv2d(%129, meta[relay.Constant][106] /* ty=Tensor[(16, 88, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %131 = nn.batch_norm(%130, meta[relay.Constant][107] /* ty=Tensor[(16), float32] */, meta[relay.Constant][108] /* ty=Tensor[(16), float32] */, meta[relay.Constant][109] /* ty=Tensor[(16), float32] */, meta[relay.Constant][110] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 4, 4), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %132 = %131.0 /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %133 = add(%105, %132) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %134 = nn.conv2d(%133, meta[relay.Constant][111] /* ty=Tensor[(40, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1]) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %135 = nn.batch_norm(%134, meta[relay.Constant][112] /* ty=Tensor[(40), float32] */, meta[relay.Constant][113] /* ty=Tensor[(40), float32] */, meta[relay.Constant][114] /* ty=Tensor[(40), float32] */, meta[relay.Constant][115] /* ty=Tensor[(40), float32] */) /* ty=(Tensor[(1, 40, 4, 4), float32], Tensor[(40), float32], Tensor[(40), float32]) */;
  %136 = %135.0 /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %137 = add(%136, 3f /* ty=float32 */) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %138 = clip(%137, a_min=0f, a_max=6f) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %139 = multiply(%136, %138) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %140 = divide(%139, 6f /* ty=float32 */) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %141 = nn.conv2d(%140, meta[relay.Constant][116] /* ty=Tensor[(40, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=40, channels=40, kernel_size=[5, 5]) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %142 = nn.batch_norm(%141, meta[relay.Constant][117] /* ty=Tensor[(40), float32] */, meta[relay.Constant][118] /* ty=Tensor[(40), float32] */, meta[relay.Constant][119] /* ty=Tensor[(40), float32] */, meta[relay.Constant][120] /* ty=Tensor[(40), float32] */) /* ty=(Tensor[(1, 40, 4, 4), float32], Tensor[(40), float32], Tensor[(40), float32]) */;
  %143 = %142.0 /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %144 = add(%143, 3f /* ty=float32 */) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %145 = clip(%144, a_min=0f, a_max=6f) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %146 = multiply(%143, %145) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %147 = divide(%146, 6f /* ty=float32 */) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %148 = nn.global_avg_pool2d(%147) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %149 = nn.conv2d(%148, meta[relay.Constant][121] /* ty=Tensor[(10, 40, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=10, kernel_size=[1, 1]) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %150 = nn.bias_add(%149, meta[relay.Constant][122] /* ty=Tensor[(10), float32] */) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %151 = nn.relu(%150) /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %152 = nn.conv2d(%151, meta[relay.Constant][123] /* ty=Tensor[(40, 10, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1]) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %153 = nn.bias_add(%152, meta[relay.Constant][124] /* ty=Tensor[(40), float32] */) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %154 = multiply(%153, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %155 = add(%154, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %156 = clip(%155, a_min=0f, a_max=1f) /* ty=Tensor[(1, 40, 1, 1), float32] */;
  %157 = multiply(%147, %156) /* ty=Tensor[(1, 40, 4, 4), float32] */;
  %158 = nn.conv2d(%157, meta[relay.Constant][125] /* ty=Tensor[(16, 40, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %159 = nn.batch_norm(%158, meta[relay.Constant][126] /* ty=Tensor[(16), float32] */, meta[relay.Constant][127] /* ty=Tensor[(16), float32] */, meta[relay.Constant][128] /* ty=Tensor[(16), float32] */, meta[relay.Constant][129] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 4, 4), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %160 = %159.0 /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %161 = add(%133, %160) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %162 = nn.conv2d(%161, meta[relay.Constant][130] /* ty=Tensor[(48, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %163 = nn.batch_norm(%162, meta[relay.Constant][131] /* ty=Tensor[(48), float32] */, meta[relay.Constant][132] /* ty=Tensor[(48), float32] */, meta[relay.Constant][133] /* ty=Tensor[(48), float32] */, meta[relay.Constant][134] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 4, 4), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %164 = %163.0 /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %165 = add(%164, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %166 = clip(%165, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %167 = multiply(%164, %166) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %168 = divide(%167, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %169 = nn.conv2d(%168, meta[relay.Constant][135] /* ty=Tensor[(48, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=48, channels=48, kernel_size=[5, 5]) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %170 = nn.batch_norm(%169, meta[relay.Constant][136] /* ty=Tensor[(48), float32] */, meta[relay.Constant][137] /* ty=Tensor[(48), float32] */, meta[relay.Constant][138] /* ty=Tensor[(48), float32] */, meta[relay.Constant][139] /* ty=Tensor[(48), float32] */) /* ty=(Tensor[(1, 48, 4, 4), float32], Tensor[(48), float32], Tensor[(48), float32]) */;
  %171 = %170.0 /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %172 = add(%171, 3f /* ty=float32 */) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %173 = clip(%172, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %174 = multiply(%171, %173) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %175 = divide(%174, 6f /* ty=float32 */) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %176 = nn.global_avg_pool2d(%175) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %177 = nn.conv2d(%176, meta[relay.Constant][140] /* ty=Tensor[(12, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %178 = nn.bias_add(%177, meta[relay.Constant][141] /* ty=Tensor[(12), float32] */) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %179 = nn.relu(%178) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %180 = nn.conv2d(%179, meta[relay.Constant][142] /* ty=Tensor[(48, 12, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %181 = nn.bias_add(%180, meta[relay.Constant][143] /* ty=Tensor[(48), float32] */) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %182 = multiply(%181, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %183 = add(%182, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %184 = clip(%183, a_min=0f, a_max=1f) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %185 = multiply(%175, %184) /* ty=Tensor[(1, 48, 4, 4), float32] */;
  %186 = nn.conv2d(%185, meta[relay.Constant][144] /* ty=Tensor[(16, 48, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %187 = nn.batch_norm(%186, meta[relay.Constant][145] /* ty=Tensor[(16), float32] */, meta[relay.Constant][146] /* ty=Tensor[(16), float32] */, meta[relay.Constant][147] /* ty=Tensor[(16), float32] */, meta[relay.Constant][148] /* ty=Tensor[(16), float32] */) /* ty=(Tensor[(1, 16, 4, 4), float32], Tensor[(16), float32], Tensor[(16), float32]) */;
  %188 = %187.0 /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %189 = add(%161, %188) /* ty=Tensor[(1, 16, 4, 4), float32] */;
  %190 = nn.conv2d(%189, meta[relay.Constant][149] /* ty=Tensor[(104, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=104, kernel_size=[1, 1]) /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %191 = nn.batch_norm(%190, meta[relay.Constant][150] /* ty=Tensor[(104), float32] */, meta[relay.Constant][151] /* ty=Tensor[(104), float32] */, meta[relay.Constant][152] /* ty=Tensor[(104), float32] */, meta[relay.Constant][153] /* ty=Tensor[(104), float32] */) /* ty=(Tensor[(1, 104, 4, 4), float32], Tensor[(104), float32], Tensor[(104), float32]) */;
  %192 = %191.0 /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %193 = add(%192, 3f /* ty=float32 */) /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %194 = clip(%193, a_min=0f, a_max=6f) /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %195 = multiply(%192, %194) /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %196 = divide(%195, 6f /* ty=float32 */) /* ty=Tensor[(1, 104, 4, 4), float32] */;
  %197 = nn.conv2d(%196, meta[relay.Constant][154] /* ty=Tensor[(104, 1, 5, 5), float32] */, strides=[2, 2], padding=[2, 2, 2, 2], groups=104, channels=104, kernel_size=[5, 5]) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %198 = nn.batch_norm(%197, meta[relay.Constant][155] /* ty=Tensor[(104), float32] */, meta[relay.Constant][156] /* ty=Tensor[(104), float32] */, meta[relay.Constant][157] /* ty=Tensor[(104), float32] */, meta[relay.Constant][158] /* ty=Tensor[(104), float32] */) /* ty=(Tensor[(1, 104, 2, 2), float32], Tensor[(104), float32], Tensor[(104), float32]) */;
  %199 = %198.0 /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %200 = add(%199, 3f /* ty=float32 */) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %201 = clip(%200, a_min=0f, a_max=6f) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %202 = multiply(%199, %201) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %203 = divide(%202, 6f /* ty=float32 */) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %204 = nn.global_avg_pool2d(%203) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %205 = nn.conv2d(%204, meta[relay.Constant][159] /* ty=Tensor[(26, 104, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=26, kernel_size=[1, 1]) /* ty=Tensor[(1, 26, 1, 1), float32] */;
  %206 = nn.bias_add(%205, meta[relay.Constant][160] /* ty=Tensor[(26), float32] */) /* ty=Tensor[(1, 26, 1, 1), float32] */;
  %207 = nn.relu(%206) /* ty=Tensor[(1, 26, 1, 1), float32] */;
  %208 = nn.conv2d(%207, meta[relay.Constant][161] /* ty=Tensor[(104, 26, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=104, kernel_size=[1, 1]) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %209 = nn.bias_add(%208, meta[relay.Constant][162] /* ty=Tensor[(104), float32] */) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %210 = multiply(%209, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %211 = add(%210, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %212 = clip(%211, a_min=0f, a_max=1f) /* ty=Tensor[(1, 104, 1, 1), float32] */;
  %213 = multiply(%203, %212) /* ty=Tensor[(1, 104, 2, 2), float32] */;
  %214 = nn.conv2d(%213, meta[relay.Constant][163] /* ty=Tensor[(32, 104, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %215 = nn.batch_norm(%214, meta[relay.Constant][164] /* ty=Tensor[(32), float32] */, meta[relay.Constant][165] /* ty=Tensor[(32), float32] */, meta[relay.Constant][166] /* ty=Tensor[(32), float32] */, meta[relay.Constant][167] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 2, 2), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %216 = %215.0 /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %217 = nn.conv2d(%216, meta[relay.Constant][168] /* ty=Tensor[(200, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=200, kernel_size=[1, 1]) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %218 = nn.batch_norm(%217, meta[relay.Constant][169] /* ty=Tensor[(200), float32] */, meta[relay.Constant][170] /* ty=Tensor[(200), float32] */, meta[relay.Constant][171] /* ty=Tensor[(200), float32] */, meta[relay.Constant][172] /* ty=Tensor[(200), float32] */) /* ty=(Tensor[(1, 200, 2, 2), float32], Tensor[(200), float32], Tensor[(200), float32]) */;
  %219 = %218.0 /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %220 = add(%219, 3f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %221 = clip(%220, a_min=0f, a_max=6f) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %222 = multiply(%219, %221) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %223 = divide(%222, 6f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %224 = nn.conv2d(%223, meta[relay.Constant][173] /* ty=Tensor[(200, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=200, channels=200, kernel_size=[5, 5]) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %225 = nn.batch_norm(%224, meta[relay.Constant][174] /* ty=Tensor[(200), float32] */, meta[relay.Constant][175] /* ty=Tensor[(200), float32] */, meta[relay.Constant][176] /* ty=Tensor[(200), float32] */, meta[relay.Constant][177] /* ty=Tensor[(200), float32] */) /* ty=(Tensor[(1, 200, 2, 2), float32], Tensor[(200), float32], Tensor[(200), float32]) */;
  %226 = %225.0 /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %227 = add(%226, 3f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %228 = clip(%227, a_min=0f, a_max=6f) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %229 = multiply(%226, %228) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %230 = divide(%229, 6f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %231 = nn.global_avg_pool2d(%230) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %232 = nn.conv2d(%231, meta[relay.Constant][178] /* ty=Tensor[(50, 200, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=50, kernel_size=[1, 1]) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %233 = nn.bias_add(%232, meta[relay.Constant][179] /* ty=Tensor[(50), float32] */) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %234 = nn.relu(%233) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %235 = nn.conv2d(%234, meta[relay.Constant][180] /* ty=Tensor[(200, 50, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=200, kernel_size=[1, 1]) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %236 = nn.bias_add(%235, meta[relay.Constant][181] /* ty=Tensor[(200), float32] */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %237 = multiply(%236, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %238 = add(%237, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %239 = clip(%238, a_min=0f, a_max=1f) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %240 = multiply(%230, %239) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %241 = nn.conv2d(%240, meta[relay.Constant][182] /* ty=Tensor[(32, 200, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %242 = nn.batch_norm(%241, meta[relay.Constant][183] /* ty=Tensor[(32), float32] */, meta[relay.Constant][184] /* ty=Tensor[(32), float32] */, meta[relay.Constant][185] /* ty=Tensor[(32), float32] */, meta[relay.Constant][186] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 2, 2), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %243 = %242.0 /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %244 = add(%216, %243) /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %245 = nn.conv2d(%244, meta[relay.Constant][187] /* ty=Tensor[(200, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=200, kernel_size=[1, 1]) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %246 = nn.batch_norm(%245, meta[relay.Constant][188] /* ty=Tensor[(200), float32] */, meta[relay.Constant][189] /* ty=Tensor[(200), float32] */, meta[relay.Constant][190] /* ty=Tensor[(200), float32] */, meta[relay.Constant][191] /* ty=Tensor[(200), float32] */) /* ty=(Tensor[(1, 200, 2, 2), float32], Tensor[(200), float32], Tensor[(200), float32]) */;
  %247 = %246.0 /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %248 = add(%247, 3f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %249 = clip(%248, a_min=0f, a_max=6f) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %250 = multiply(%247, %249) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %251 = divide(%250, 6f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %252 = nn.conv2d(%251, meta[relay.Constant][192] /* ty=Tensor[(200, 1, 5, 5), float32] */, padding=[2, 2, 2, 2], groups=200, channels=200, kernel_size=[5, 5]) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %253 = nn.batch_norm(%252, meta[relay.Constant][193] /* ty=Tensor[(200), float32] */, meta[relay.Constant][194] /* ty=Tensor[(200), float32] */, meta[relay.Constant][195] /* ty=Tensor[(200), float32] */, meta[relay.Constant][196] /* ty=Tensor[(200), float32] */) /* ty=(Tensor[(1, 200, 2, 2), float32], Tensor[(200), float32], Tensor[(200), float32]) */;
  %254 = %253.0 /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %255 = add(%254, 3f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %256 = clip(%255, a_min=0f, a_max=6f) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %257 = multiply(%254, %256) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %258 = divide(%257, 6f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %259 = nn.global_avg_pool2d(%258) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %260 = nn.conv2d(%259, meta[relay.Constant][197] /* ty=Tensor[(50, 200, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=50, kernel_size=[1, 1]) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %261 = nn.bias_add(%260, meta[relay.Constant][198] /* ty=Tensor[(50), float32] */) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %262 = nn.relu(%261) /* ty=Tensor[(1, 50, 1, 1), float32] */;
  %263 = nn.conv2d(%262, meta[relay.Constant][199] /* ty=Tensor[(200, 50, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=200, kernel_size=[1, 1]) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %264 = nn.bias_add(%263, meta[relay.Constant][200] /* ty=Tensor[(200), float32] */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %265 = multiply(%264, 0.2f /* ty=float32 */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %266 = add(%265, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %267 = clip(%266, a_min=0f, a_max=1f) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %268 = multiply(%258, %267) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %269 = nn.conv2d(%268, meta[relay.Constant][201] /* ty=Tensor[(32, 200, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %270 = nn.batch_norm(%269, meta[relay.Constant][202] /* ty=Tensor[(32), float32] */, meta[relay.Constant][203] /* ty=Tensor[(32), float32] */, meta[relay.Constant][204] /* ty=Tensor[(32), float32] */, meta[relay.Constant][205] /* ty=Tensor[(32), float32] */) /* ty=(Tensor[(1, 32, 2, 2), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %271 = %270.0 /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %272 = add(%244, %271) /* ty=Tensor[(1, 32, 2, 2), float32] */;
  %273 = nn.conv2d(%272, meta[relay.Constant][206] /* ty=Tensor[(200, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=200, kernel_size=[1, 1]) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %274 = nn.batch_norm(%273, meta[relay.Constant][207] /* ty=Tensor[(200), float32] */, meta[relay.Constant][208] /* ty=Tensor[(200), float32] */, meta[relay.Constant][209] /* ty=Tensor[(200), float32] */, meta[relay.Constant][210] /* ty=Tensor[(200), float32] */) /* ty=(Tensor[(1, 200, 2, 2), float32], Tensor[(200), float32], Tensor[(200), float32]) */;
  %275 = %274.0 /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %276 = add(%275, 3f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %277 = clip(%276, a_min=0f, a_max=6f) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %278 = multiply(%275, %277) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %279 = divide(%278, 6f /* ty=float32 */) /* ty=Tensor[(1, 200, 2, 2), float32] */;
  %280 = nn.global_avg_pool2d(%279) /* ty=Tensor[(1, 200, 1, 1), float32] */;
  %281 = nn.conv2d(%280, meta[relay.Constant][211] /* ty=Tensor[(1280, 200, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %282 = add(%281, 3f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %283 = clip(%282, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %284 = multiply(%281, %283) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %285 = divide(%284, 6f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %286 = multiply(%285, 0.8f /* ty=float32 */) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %287 = reshape(%286, newshape=[1, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %288 = nn.dense(%287, meta[relay.Constant][212] /* ty=Tensor[(1000, 1280), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(1, 1000), float32] */;
  %289 = add(%288, meta[relay.Constant][213] /* ty=Tensor[(1000), float32] */) /* ty=Tensor[(1, 1000), float32] */;
  nn.softmax(%289, axis=1) /* ty=Tensor[(1, 1000), float32] */
}

